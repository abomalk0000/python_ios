diff -Naur tmp/Python-2.7.13/Modules/Setup Python-2.7.13/Modules/Setup
--- tmp/Python-2.7.13/Modules/Setup	1970-01-01 01:00:00.000000000 +0100
+++ Python-2.7.13/Modules/Setup	2018-12-09 15:27:27.000000000 +0100
@@ -0,0 +1,499 @@
+# -*- makefile -*-
+# The file Setup is used by the makesetup script to construct the files
+# Makefile and config.c, from Makefile.pre and config.c.in,
+# respectively.  The file Setup itself is initially copied from
+# Setup.dist; once it exists it will not be overwritten, so you can edit
+# Setup to your heart's content.  Note that Makefile.pre is created
+# from Makefile.pre.in by the toplevel configure script.
+
+# (VPATH notes: Setup and Makefile.pre are in the build directory, as
+# are Makefile and config.c; the *.in and *.dist files are in the source
+# directory.)
+
+# Each line in this file describes one or more optional modules.
+# Modules enabled here will not be compiled by the setup.py script,
+# so the file can be used to override setup.py's behavior.
+
+# Lines have the following structure:
+#
+# <module> ... [<sourcefile> ...] [<cpparg> ...] [<library> ...]
+#
+# <sourcefile> is anything ending in .c (.C, .cc, .c++ are C++ files)
+# <cpparg> is anything starting with -I, -D, -U or -C
+# <library> is anything ending in .a or beginning with -l or -L
+# <module> is anything else but should be a valid Python
+# identifier (letters, digits, underscores, beginning with non-digit)
+#
+# (As the makesetup script changes, it may recognize some other
+# arguments as well, e.g. *.so and *.sl as libraries.  See the big
+# case statement in the makesetup script.)
+#
+# Lines can also have the form
+#
+# <name> = <value>
+#
+# which defines a Make variable definition inserted into Makefile.in
+#
+# Finally, if a line contains just the word "*shared*" (without the
+# quotes but with the stars), then the following modules will not be
+# built statically.  The build process works like this:
+#
+# 1. Build all modules that are declared as static in Modules/Setup,
+#    combine them into libpythonxy.a, combine that into python.
+# 2. Build all modules that are listed as shared in Modules/Setup.
+# 3. Invoke setup.py. That builds all modules that
+#    a) are not builtin, and
+#    b) are not listed in Modules/Setup, and
+#    c) can be build on the target
+#
+# Therefore, modules declared to be shared will not be
+# included in the config.c file, nor in the list of objects to be
+# added to the library archive, and their linker options won't be
+# added to the linker options. Rules to create their .o files and
+# their shared libraries will still be added to the Makefile, and
+# their names will be collected in the Make variable SHAREDMODS.  This
+# is used to build modules as shared libraries.  (They can be
+# installed using "make sharedinstall", which is implied by the
+# toplevel "make install" target.)  (For compatibility,
+# *noconfig* has the same effect as *shared*.)
+#
+# In addition, *static* explicitly declares the following modules to
+# be static.  Lines containing "*static*" and "*shared*" may thus
+# alternate throughout this file.
+
+# NOTE: As a standard policy, as many modules as can be supported by a
+# platform should be present.  The distribution comes with all modules
+# enabled that are supported by most platforms and don't require you
+# to ftp sources from elsewhere.
+
+
+# Some special rules to define PYTHONPATH.
+# Edit the definitions below to indicate which options you are using.
+# Don't add any whitespace or comments!
+
+# Directories where library files get installed.
+# DESTLIB is for Python modules; MACHDESTLIB for shared libraries.
+DESTLIB=$(LIBDEST)
+MACHDESTLIB=$(BINLIBDEST)
+
+# NOTE: all the paths are now relative to the prefix that is computed
+# at run time!
+
+# Standard path -- don't edit.
+# No leading colon since this is the first entry.
+# Empty since this is now just the runtime prefix.
+DESTPATH=
+
+# Site specific path components -- should begin with : if non-empty
+SITEPATH=
+
+# Standard path components for test modules
+TESTPATH=
+
+# Path components for machine- or system-dependent modules and shared libraries
+MACHDEPPATH=:$(PLATDIR)
+EXTRAMACHDEPPATH=
+
+# Path component for the Tkinter-related modules
+# The TKPATH variable is always enabled, to save you the effort.
+TKPATH=:lib-tk
+
+# Path component for old modules.
+OLDPATH=:lib-old
+
+COREPYTHONPATH=$(DESTPATH)$(SITEPATH)$(TESTPATH)$(MACHDEPPATH)$(EXTRAMACHDEPPATH)$(TKPATH)$(OLDPATH)
+PYTHONPATH=$(COREPYTHONPATH)
+
+
+# The modules listed here can't be built as shared libraries for
+# various reasons; therefore they are listed here instead of in the
+# normal order.
+
+# This only contains the minimal set of modules required to run the 
+# setup.py script in the root of the Python source tree.
+
+posix posixmodule.c		# posix (UNIX) system calls
+errno errnomodule.c		# posix (UNIX) errno values
+pwd pwdmodule.c			# this is needed to find out the user's home dir
+				# if $HOME is not set
+_sre _sre.c			# Fredrik Lundh's new regular expressions
+_codecs _codecsmodule.c		# access to the builtin codecs and codec registry
+_weakref _weakref.c             # weak references
+
+# The zipimport module is always imported at startup. Having it as a
+# builtin module avoids some bootstrapping problems and reduces overhead.
+zipimport zipimport.c
+
+# The rest of the modules listed in this file are all commented out by
+# default.  Usually they can be detected and built as dynamically
+# loaded modules by the new setup.py script added in Python 2.1.  If
+# you're on a platform that doesn't support dynamic loading, want to 
+# compile modules statically into the Python binary, or need to 
+# specify some odd set of compiler switches, you can uncomment the 
+# appropriate lines below.
+
+# ======================================================================
+
+# The Python symtable module depends on .h files that setup.py doesn't track
+_symtable symtablemodule.c
+
+# The SGI specific GL module:
+
+GLHACK=-Dclear=__GLclear
+#gl glmodule.c cgensupport.c -I$(srcdir) $(GLHACK) -lgl -lX11
+
+# Pure module.  Cannot be linked dynamically.
+# -DWITH_QUANTIFY, -DWITH_PURIFY, or -DWITH_ALL_PURE
+#WHICH_PURE_PRODUCTS=-DWITH_ALL_PURE
+#PURE_INCLS=-I/usr/local/include
+#PURE_STUBLIBS=-L/usr/local/lib -lpurify_stubs -lquantify_stubs
+#pure puremodule.c $(WHICH_PURE_PRODUCTS) $(PURE_INCLS) $(PURE_STUBLIBS)
+
+# Uncommenting the following line tells makesetup that all following
+# modules are to be built as shared libraries (see above for more
+# detail; also note that *static* reverses this effect):
+
+#*shared*
+
+# GNU readline.  Unlike previous Python incarnations, GNU readline is
+# now incorporated in an optional module, configured in the Setup file
+# instead of by a configure script switch.  You may have to insert a
+# -L option pointing to the directory where libreadline.* lives,
+# and you may have to change -ltermcap to -ltermlib or perhaps remove
+# it, depending on your system -- see the GNU readline instructions.
+# It's okay for this to be a shared library, too.
+
+#readline readline.c -lreadline -ltermcap
+
+
+# Modules that should always be present (non UNIX dependent):
+
+#array arraymodule.c	# array objects
+#cmath cmathmodule.c _math.c # -lm # complex math library functions
+#math mathmodule.c _math.c # -lm # math library functions, e.g. sin()
+#_struct _struct.c	# binary structure packing/unpacking
+#time timemodule.c # -lm # time operations and variables
+#operator operator.c	# operator.add() and similar goodies
+#_testcapi _testcapimodule.c    # Python C API test module
+#_random _randommodule.c	# Random number generator
+#_collections _collectionsmodule.c # Container types
+#_heapq _heapqmodule.c		# Heapq type
+#itertools itertoolsmodule.c	# Functions creating iterators for efficient looping 
+#strop stropmodule.c		# String manipulations
+#_functools _functoolsmodule.c	# Tools for working with functions and callable objects
+#_elementtree -I$(srcdir)/Modules/expat -DHAVE_EXPAT_CONFIG_H -DUSE_PYEXPAT_CAPI _elementtree.c	# elementtree accelerator
+#_pickle _pickle.c	# pickle accelerator
+#datetime datetimemodule.c	# date/time type
+#_bisect _bisectmodule.c	# Bisection algorithms
+
+#unicodedata unicodedata.c    # static Unicode character database
+
+# access to ISO C locale support
+#_locale _localemodule.c  # -lintl
+
+# Standard I/O baseline
+#_io -I$(srcdir)/Modules/_io _io/bufferedio.c _io/bytesio.c _io/fileio.c _io/iobase.c _io/_iomodule.c _io/stringio.c _io/textio.c
+
+
+# Modules with some UNIX dependencies -- on by default:
+# (If you have a really backward UNIX, select and socket may not be
+# supported...)
+
+#fcntl fcntlmodule.c	# fcntl(2) and ioctl(2)
+#spwd spwdmodule.c		# spwd(3) 
+#grp grpmodule.c		# grp(3)
+#select selectmodule.c	# select(2); not on ancient System V
+
+# Memory-mapped files (also works on Win32).
+#mmap mmapmodule.c
+
+# CSV file helper
+#_csv _csv.c
+
+# Socket module helper for socket(2)
+#_socket socketmodule.c timemodule.c
+
+# Socket module helper for SSL support; you must comment out the other
+# socket line above, and possibly edit the SSL variable:
+SSL=../blink/Frameworks
+_ssl _ssl.c \
+	-DUSE_SSL -I$(SSL)/include \
+	-F$(SSL) -Framework openssl -lcrypto
+
+# The crypt module is now disabled by default because it breaks builds
+# on many systems (where -lcrypt is needed), e.g. Linux (I believe).
+#
+# First, look at Setup.config; configure may have set this for you.
+
+#crypt cryptmodule.c # -lcrypt	# crypt(3); needs -lcrypt on some systems
+
+
+# Some more UNIX dependent modules -- off by default, since these
+# are not supported by all UNIX systems:
+
+#nis nismodule.c -lnsl	# Sun yellow pages -- not everywhere
+#termios termios.c	# Steen Lumholt's termios module
+#resource resource.c	# Jeremy Hylton's rlimit interface
+
+
+# Multimedia modules -- off by default.
+# These don't work for 64-bit platforms!!!
+# #993173 says audioop works on 64-bit platforms, though.
+# These represent audio samples or images as strings:
+
+#audioop audioop.c	# Operations on audio samples
+#imageop imageop.c	# Operations on images
+
+
+# Note that the _md5 and _sha modules are normally only built if the
+# system does not have the OpenSSL libs containing an optimized version.
+
+# The _md5 module implements the RSA Data Security, Inc. MD5
+# Message-Digest Algorithm, described in RFC 1321.  The necessary files
+# md5.c and md5.h are included here.
+
+#_md5 md5module.c md5.c
+
+
+# The _sha module implements the SHA checksum algorithms.
+# (NIST's Secure Hash Algorithms.)
+#_sha shamodule.c
+#_sha256 sha256module.c
+#_sha512 sha512module.c
+
+
+# SGI IRIX specific modules -- off by default.
+
+# These module work on any SGI machine:
+
+# *** gl must be enabled higher up in this file ***
+#fm fmmodule.c $(GLHACK) -lfm -lgl		# Font Manager
+#sgi sgimodule.c			# sgi.nap() and a few more
+
+# This module requires the header file
+# /usr/people/4Dgifts/iristools/include/izoom.h:
+#imgfile imgfile.c -limage -lgutil -lgl -lm	# Image Processing Utilities
+
+
+# These modules require the Multimedia Development Option (I think):
+
+#al almodule.c -laudio			# Audio Library
+#cd cdmodule.c -lcdaudio -lds -lmediad	# CD Audio Library
+#cl clmodule.c -lcl -lawareaudio	# Compression Library
+#sv svmodule.c yuvconvert.c -lsvideo -lXext -lX11	# Starter Video
+
+
+# The FORMS library, by Mark Overmars, implements user interface
+# components such as dialogs and buttons using SGI's GL and FM
+# libraries.  You must ftp the FORMS library separately from
+# ftp://ftp.cs.ruu.nl/pub/SGI/FORMS.  It was tested with FORMS 2.2a.
+# NOTE: if you want to be able to use FORMS and curses simultaneously
+# (or both link them statically into the same binary), you must
+# compile all of FORMS with the cc option "-Dclear=__GLclear".
+
+# The FORMS variable must point to the FORMS subdirectory of the forms
+# toplevel directory:
+
+#FORMS=/ufs/guido/src/forms/FORMS
+#fl flmodule.c -I$(FORMS) $(GLHACK) $(FORMS)/libforms.a -lfm -lgl
+
+
+# SunOS specific modules -- off by default:
+
+#sunaudiodev sunaudiodev.c
+
+
+# A Linux specific module -- off by default; this may also work on 
+# some *BSDs.
+
+#linuxaudiodev linuxaudiodev.c
+
+
+# George Neville-Neil's timing module:
+
+#timing timingmodule.c
+
+
+# The _tkinter module.
+#
+# The command for _tkinter is long and site specific.  Please
+# uncomment and/or edit those parts as indicated.  If you don't have a
+# specific extension (e.g. Tix or BLT), leave the corresponding line
+# commented out.  (Leave the trailing backslashes in!  If you
+# experience strange errors, you may want to join all uncommented
+# lines and remove the backslashes -- the backslash interpretation is
+# done by the shell's "read" command and it may not be implemented on
+# every system.
+
+# *** Always uncomment this (leave the leading underscore in!):
+# _tkinter _tkinter.c tkappinit.c -DWITH_APPINIT \
+# *** Uncomment and edit to reflect where your Tcl/Tk libraries are:
+#	-L/usr/local/lib \
+# *** Uncomment and edit to reflect where your Tcl/Tk headers are:
+#	-I/usr/local/include \
+# *** Uncomment and edit to reflect where your X11 header files are:
+#	-I/usr/X11R6/include \
+# *** Or uncomment this for Solaris:
+#	-I/usr/openwin/include \
+# *** Uncomment and edit for Tix extension only:
+#	-DWITH_TIX -ltix8.1.8.2 \
+# *** Uncomment and edit for BLT extension only:
+#	-DWITH_BLT -I/usr/local/blt/blt8.0-unoff/include -lBLT8.0 \
+# *** Uncomment and edit for PIL (TkImaging) extension only:
+#     (See http://www.pythonware.com/products/pil/ for more info)
+#	-DWITH_PIL -I../Extensions/Imaging/libImaging  tkImaging.c \
+# *** Uncomment and edit for TOGL extension only:
+#	-DWITH_TOGL togl.c \
+# *** Uncomment and edit to reflect your Tcl/Tk versions:
+#	-ltk8.2 -ltcl8.2 \
+# *** Uncomment and edit to reflect where your X11 libraries are:
+#	-L/usr/X11R6/lib \
+# *** Or uncomment this for Solaris:
+#	-L/usr/openwin/lib \
+# *** Uncomment these for TOGL extension only:
+#	-lGL -lGLU -lXext -lXmu \
+# *** Uncomment for AIX:
+#	-lld \
+# *** Always uncomment this; X11 libraries to link with:
+#	-lX11
+
+# Lance Ellinghaus's syslog module
+#syslog syslogmodule.c		# syslog daemon interface
+
+
+# Curses support, requring the System V version of curses, often
+# provided by the ncurses library.  e.g. on Linux, link with -lncurses
+# instead of -lcurses).
+#
+# First, look at Setup.config; configure may have set this for you.
+
+#_curses _cursesmodule.c -lcurses -ltermcap
+# Wrapper for the panel library that's part of ncurses and SYSV curses.
+#_curses_panel _curses_panel.c -lpanel -lncurses 
+
+
+# Generic (SunOS / SVR4) dynamic loading module.
+# This is not needed for dynamic loading of Python modules --
+# it is a highly experimental and dangerous device for calling
+# *arbitrary* C functions in *arbitrary* shared libraries:
+
+#dl dlmodule.c
+
+
+# Modules that provide persistent dictionary-like semantics.  You will
+# probably want to arrange for at least one of them to be available on
+# your machine, though none are defined by default because of library
+# dependencies.  The Python module anydbm.py provides an
+# implementation independent wrapper for these; dumbdbm.py provides
+# similar functionality (but slower of course) implemented in Python.
+
+# The standard Unix dbm module has been moved to Setup.config so that
+# it will be compiled as a shared library by default.  Compiling it as
+# a built-in module causes conflicts with the pybsddb3 module since it
+# creates a static dependency on an out-of-date version of db.so.
+#
+# First, look at Setup.config; configure may have set this for you.
+
+#dbm dbmmodule.c 	# dbm(3) may require -lndbm or similar
+
+# Anthony Baxter's gdbm module.  GNU dbm(3) will require -lgdbm:
+#
+# First, look at Setup.config; configure may have set this for you.
+
+#gdbm gdbmmodule.c -I/usr/local/include -L/usr/local/lib -lgdbm
+
+
+# Sleepycat Berkeley DB interface.
+#
+# This requires the Sleepycat DB code, see http://www.sleepycat.com/
+# The earliest supported version of that library is 3.0, the latest
+# supported version is 4.0 (4.1 is specifically not supported, as that
+# changes the semantics of transactional databases). A list of available
+# releases can be found at
+#
+# http://www.sleepycat.com/update/index.html
+#
+# Edit the variables DB and DBLIBVERto point to the db top directory
+# and the subdirectory of PORT where you built it.
+#DB=/usr/local/BerkeleyDB.4.0
+#DBLIBVER=4.0
+#DBINC=$(DB)/include
+#DBLIB=$(DB)/lib
+#_bsddb _bsddb.c -I$(DBINC) -L$(DBLIB) -ldb-$(DBLIBVER)
+
+# Historical Berkeley DB 1.85
+#
+# This module is deprecated; the 1.85 version of the Berkeley DB library has
+# bugs that can cause data corruption. If you can, use later versions of the
+# library instead, available from <http://www.sleepycat.com/>.
+
+#DB=/depot/sundry/src/berkeley-db/db.1.85
+#DBPORT=$(DB)/PORT/irix.5.3
+#bsddb185 bsddbmodule.c -I$(DBPORT)/include -I$(DBPORT) $(DBPORT)/libdb.a
+
+
+
+# Helper module for various ascii-encoders
+#binascii binascii.c
+
+# Fred Drake's interface to the Python parser
+#parser parsermodule.c
+
+# cStringIO and cPickle
+#cStringIO cStringIO.c
+#cPickle cPickle.c
+
+
+# Lee Busby's SIGFPE modules.
+# The library to link fpectl with is platform specific.
+# Choose *one* of the options below for fpectl:
+
+# For SGI IRIX (tested on 5.3):
+#fpectl fpectlmodule.c -lfpe
+
+# For Solaris with SunPro compiler (tested on Solaris 2.5 with SunPro C 4.2):
+# (Without the compiler you don't have -lsunmath.)
+#fpectl fpectlmodule.c -R/opt/SUNWspro/lib -lsunmath -lm
+
+# For other systems: see instructions in fpectlmodule.c.
+#fpectl fpectlmodule.c ...
+
+# Test module for fpectl.  No extra libraries needed.
+#fpetest fpetestmodule.c
+
+# Andrew Kuchling's zlib module.
+# This require zlib 1.1.3 (or later).
+# See http://www.gzip.org/zlib/
+#zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz
+
+# Interface to the Expat XML parser
+#
+# Expat was written by James Clark and is now maintained by a group of
+# developers on SourceForge; see www.libexpat.org for more
+# information.  The pyexpat module was written by Paul Prescod after a
+# prototype by Jack Jansen.  Source of Expat 1.95.2 is included in
+# Modules/expat/.  Usage of a system shared libexpat.so/expat.dll is
+# not advised.
+#
+# More information on Expat can be found at www.libexpat.org.
+#
+#pyexpat expat/xmlparse.c expat/xmlrole.c expat/xmltok.c pyexpat.c -I$(srcdir)/Modules/expat -DHAVE_EXPAT_CONFIG_H -DUSE_PYEXPAT_CAPI
+
+
+# Hye-Shik Chang's CJKCodecs
+
+# multibytecodec is required for all the other CJK codec modules
+#_multibytecodec cjkcodecs/multibytecodec.c
+
+#_codecs_cn cjkcodecs/_codecs_cn.c
+#_codecs_hk cjkcodecs/_codecs_hk.c
+#_codecs_iso2022 cjkcodecs/_codecs_iso2022.c
+#_codecs_jp cjkcodecs/_codecs_jp.c
+#_codecs_kr cjkcodecs/_codecs_kr.c
+#_codecs_tw cjkcodecs/_codecs_tw.c
+
+# Example -- included for reference only:
+# xx xxmodule.c
+
+# Another example -- the 'xxsubtype' module shows C-level subtyping in action
+xxsubtype xxsubtype.c
diff -Naur tmp/Python-2.7.13/Modules/Setup.config Python-2.7.13/Modules/Setup.config
--- tmp/Python-2.7.13/Modules/Setup.config	1970-01-01 01:00:00.000000000 +0100
+++ Python-2.7.13/Modules/Setup.config	2018-12-09 15:27:27.000000000 +0100
@@ -0,0 +1,13 @@
+# This file is transmogrified into Setup.config by config.status.
+
+# The purpose of this file is to conditionally enable certain modules
+# based on configure-time options.
+
+# Threading
+thread threadmodule.c
+
+# The signal module
+signal signalmodule.c
+
+# The rest of the modules previously listed in this file are built
+# by the setup.py script in Python 2.1 and later.
diff -Naur tmp/Python-2.7.13/Modules/Setup.dist Python-2.7.13/Modules/Setup.dist
--- tmp/Python-2.7.13/Modules/Setup.dist	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/Setup.dist	2018-12-09 15:27:27.000000000 +0100
@@ -215,10 +215,10 @@
 
 # Socket module helper for SSL support; you must comment out the other
 # socket line above, and possibly edit the SSL variable:
-#SSL=/usr/local/ssl
-#_ssl _ssl.c \
-#	-DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \
-#	-L$(SSL)/lib -lssl -lcrypto
+SSL=../blink/Frameworks
+_ssl _ssl.c \
+	-DUSE_SSL -I$(SSL)/include \
+	-F$(SSL) -Framework openssl -lcrypto
 
 # The crypt module is now disabled by default because it breaks builds
 # on many systems (where -lcrypt is needed), e.g. Linux (I believe).
diff -Naur tmp/Python-2.7.13/Modules/Setup.local Python-2.7.13/Modules/Setup.local
--- tmp/Python-2.7.13/Modules/Setup.local	1970-01-01 01:00:00.000000000 +0100
+++ Python-2.7.13/Modules/Setup.local	2018-12-09 15:27:27.000000000 +0100
@@ -0,0 +1 @@
+# Edit this file for local setup changes
diff -Naur tmp/Python-2.7.13/Modules/_ctypes/malloc_closure.c Python-2.7.13/Modules/_ctypes/malloc_closure.c
--- tmp/Python-2.7.13/Modules/_ctypes/malloc_closure.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/_ctypes/malloc_closure.c	2018-12-09 15:27:27.000000000 +0100
@@ -75,7 +75,7 @@
 #endif
 
 #ifdef MALLOC_CLOSURE_DEBUG
-    printf("block at %p allocated (%d bytes), %d ITEMs\n",
+    fprintf(thread_stdout, "block at %p allocated (%d bytes), %d ITEMs\n",
            item, count * sizeof(ITEM), count);
 #endif
     /* put them into the free list */
diff -Naur tmp/Python-2.7.13/Modules/_multiprocessing/connection.h Python-2.7.13/Modules/_multiprocessing/connection.h
--- tmp/Python-2.7.13/Modules/_multiprocessing/connection.h	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/_multiprocessing/connection.h	2018-12-09 15:27:27.000000000 +0100
@@ -474,7 +474,7 @@
              "    Connection(handle, readable=True, writable=True).\n\n"
              "The constructor does *not* duplicate the handle.");
 
-PyTypeObject CONNECTION_TYPE = {
+__thread PyTypeObject CONNECTION_TYPE = {
     PyVarObject_HEAD_INIT(NULL, 0)
     /* tp_name           */ "_multiprocessing." CONNECTION_NAME,
     /* tp_basicsize      */ sizeof(ConnectionObject),
diff -Naur tmp/Python-2.7.13/Modules/_multiprocessing/multiprocessing.c Python-2.7.13/Modules/_multiprocessing/multiprocessing.c
--- tmp/Python-2.7.13/Modules/_multiprocessing/multiprocessing.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/_multiprocessing/multiprocessing.c	2018-12-09 15:27:27.000000000 +0100
@@ -16,8 +16,8 @@
 
 PyObject *create_win32_namespace(void);
 
-PyObject *pickle_dumps, *pickle_loads, *pickle_protocol;
-PyObject *ProcessError, *BufferTooShort;
+__thread PyObject *pickle_dumps, *pickle_loads, *pickle_protocol;
+__thread PyObject *ProcessError, *BufferTooShort;
 
 /*
  * Function which raises exceptions based on error codes
diff -Naur tmp/Python-2.7.13/Modules/_multiprocessing/multiprocessing.h Python-2.7.13/Modules/_multiprocessing/multiprocessing.h
--- tmp/Python-2.7.13/Modules/_multiprocessing/multiprocessing.h	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/_multiprocessing/multiprocessing.h	2018-12-09 15:27:27.000000000 +0100
@@ -130,14 +130,14 @@
  * Externs - not all will really exist on all platforms
  */
 
-extern PyObject *pickle_dumps;
-extern PyObject *pickle_loads;
-extern PyObject *pickle_protocol;
-extern PyObject *BufferTooShort;
-extern PyTypeObject SemLockType;
-extern PyTypeObject ConnectionType;
-extern PyTypeObject PipeConnectionType;
-extern HANDLE sigint_event;
+__thread extern PyObject *pickle_dumps;
+__thread extern PyObject *pickle_loads;
+__thread extern PyObject *pickle_protocol;
+__thread extern PyObject *BufferTooShort;
+__thread extern PyTypeObject SemLockType;
+__thread extern PyTypeObject ConnectionType;
+__thread extern PyTypeObject PipeConnectionType;
+__thread extern HANDLE sigint_event;
 
 /*
  * Py3k compatibility
diff -Naur tmp/Python-2.7.13/Modules/_multiprocessing/semaphore.c Python-2.7.13/Modules/_multiprocessing/semaphore.c
--- tmp/Python-2.7.13/Modules/_multiprocessing/semaphore.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/_multiprocessing/semaphore.c	2018-12-09 15:27:27.000000000 +0100
@@ -598,7 +598,7 @@
  * Semaphore type
  */
 
-PyTypeObject SemLockType = {
+__thread PyTypeObject SemLockType = {
     PyVarObject_HEAD_INIT(NULL, 0)
     /* tp_name           */ "_multiprocessing.SemLock",
     /* tp_basicsize      */ sizeof(SemLockObject),
diff -Naur tmp/Python-2.7.13/Modules/_ssl.c Python-2.7.13/Modules/_ssl.c
--- tmp/Python-2.7.13/Modules/_ssl.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/_ssl.c	2018-12-09 15:27:27.000000000 +0100
@@ -776,7 +776,7 @@
         value = X509_NAME_ENTRY_get_data(entry);
         attr = _create_tuple_for_attribute(name, value);
         /*
-        fprintf(stderr, "RDN level %d, attribute %s: %s\n",
+        fprintf(thread_stderr, "RDN level %d, attribute %s: %s\n",
             entry->set,
             PyBytes_AS_STRING(PyTuple_GET_ITEM(attr, 0)),
             PyBytes_AS_STRING(PyTuple_GET_ITEM(attr, 1)));
diff -Naur tmp/Python-2.7.13/Modules/bsddbmodule.c Python-2.7.13/Modules/bsddbmodule.c
--- tmp/Python-2.7.13/Modules/bsddbmodule.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/bsddbmodule.c	2018-12-09 15:27:27.000000000 +0100
@@ -17,6 +17,7 @@
 #ifdef WITH_THREAD
 #include "pythread.h"
 #endif
+#include "ios_error.h"
 
 #include <sys/types.h>
 #include <sys/stat.h>
@@ -223,7 +224,7 @@
         status = (dp->di_bsddb->close)(dp->di_bsddb);
         Py_END_ALLOW_THREADS
         if (status != 0)
-            fprintf(stderr,
+            fprintf(thread_stderr,
                 "Python bsddb: close errno %d in dealloc\n",
                 errno);
     }
@@ -582,6 +583,8 @@
     BSDDB_END_SAVE(dp)
     if (status == 0) {
         if ((kdata == NULL) || (ddata == NULL))
+            if (kdata != NULL) free(kdata);
+            if (ddata != NULL) free(ddata);
             return PyErr_NoMemory();
     }
     else {
diff -Naur tmp/Python-2.7.13/Modules/config.c Python-2.7.13/Modules/config.c
--- tmp/Python-2.7.13/Modules/config.c	1970-01-01 01:00:00.000000000 +0100
+++ Python-2.7.13/Modules/config.c	2018-12-09 15:27:27.000000000 +0100
@@ -0,0 +1,187 @@
+/* Generated automatically from ./Modules/config.c.in by makesetup. */
+/* -*- C -*- ***********************************************
+Copyright (c) 2000, BeOpen.com.
+Copyright (c) 1995-2000, Corporation for National Research Initiatives.
+Copyright (c) 1990-1995, Stichting Mathematisch Centrum.
+All rights reserved.
+
+See the file "Misc/COPYRIGHT" for information on usage and
+redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.
+******************************************************************/
+
+/* Module configuration */
+
+/* !!! !!! !!! This file is edited by the makesetup script !!! !!! !!! */
+// iOS: edited by hand, because cross-compilation //
+// Missing: openssl module (ssl is there)
+
+/* This file contains the table of built-in modules.
+   See init_builtin() in import.c. */
+
+#include "Python.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+extern void initarray(void);
+extern void initbinascii(void);
+extern void initcmath(void);
+extern void initfuture_builtins(void);
+extern void initmath(void);
+extern void init_md5(void);
+extern void initnt(void);
+extern void initoperator(void);
+extern void initstrop(void);
+extern void inittime(void);
+extern void initthread(void);
+
+extern void init_hashlib(void); 
+extern void init_sha(void);
+extern void init_sha256(void);
+extern void init_sha512(void);
+extern void init_locale(void);
+extern void init_socket(void);
+extern void initsyslog(void);
+extern void initgrp(void);
+extern void initfcntl(void);
+extern void initcrypt(void);
+extern void initselect(void);
+extern void initpyexpat(void);
+extern void init_ctypes(void);
+extern void initunicodedata(void);
+extern void initbz2(void);
+    
+extern void initsignal(void);
+extern void initposix(void);
+extern void initerrno(void);
+extern void initpwd(void);
+extern void init_sre(void);
+extern void init_codecs(void);
+extern void init_weakref(void);
+extern void initzipimport(void);
+extern void init_symtable(void);
+extern void init_ssl(void);
+extern void initxxsubtype(void);
+
+extern void initcStringIO(void);
+extern void initcPickle(void);
+extern void init_hotshot(void);
+extern void init_random(void);
+extern void inititertools(void);
+extern void init_collections(void);
+extern void init_heapq(void);
+extern void init_bisect(void);
+extern void initmmap(void);
+extern void init_csv(void);
+extern void initparser(void);
+extern void init_struct(void);
+extern void initdatetime(void);
+extern void init_functools(void);
+extern void init_json(void);
+extern void initzlib(void);
+
+extern void init_lsprof(void);
+extern void init_io(void);
+
+
+/* -- ADDMODULE MARKER 1 -- */
+
+extern void PyMarshal_Init(void);
+extern void initimp(void);
+extern void initgc(void);
+extern void init_ast(void);
+extern void _PyWarnings_Init(void);
+
+struct _inittab _PyImport_Inittab[] = {
+    {"array", initarray},
+    {"binascii", initbinascii},
+    {"cmath", initcmath},
+    {"future_builtins", initfuture_builtins},
+    {"math", initmath},
+    {"_md5", init_md5},
+    {"operator", initoperator},
+    {"strop", initstrop},
+    {"time", inittime},
+
+	{"_hash", init_hashlib}, 
+    {"_sha", init_sha},
+    {"_sha256", init_sha256},
+    {"_sha512", init_sha512},
+    {"_locale", init_locale},    
+    {"_socket", init_socket},   
+	{"syslog", initsyslog},
+	{"grp", initgrp},
+	{"fcntl", initfcntl}, 
+	{"crypt", initcrypt},
+	{"select", initselect},
+	{"pyexpat", initpyexpat},
+    {"_ctypes", init_ctypes},
+    {"unicodedata", initunicodedata},
+    {"bz2", initbz2},
+    
+	{"thread", initthread},
+	{"signal", initsignal},
+	{"posix", initposix},
+    {"cStringIO", initcStringIO},
+    {"cPickle", initcPickle},
+
+    {"_hotshot", init_hotshot},
+    {"_random", init_random},
+    {"_bisect", init_bisect},
+    {"_heapq", init_heapq},
+    {"_lsprof", init_lsprof},
+    {"itertools", inititertools},
+    {"_collections", init_collections},
+    {"mmap", initmmap},
+    {"_csv", init_csv},
+    {"parser", initparser},
+    {"_struct", init_struct},
+    {"datetime", initdatetime},
+    {"_functools", init_functools},
+    {"_json", init_json},
+
+    {"zlib", initzlib},
+	
+	{"errno", initerrno},
+	{"pwd", initpwd},
+	{"_sre", init_sre},
+	{"_codecs", init_codecs},
+	{"_weakref", init_weakref},
+	{"zipimport", initzipimport},
+	{"_symtable", init_symtable},
+	{"_ssl", init_ssl},
+	{"xxsubtype", initxxsubtype},
+
+/* -- ADDMODULE MARKER 2 -- */
+
+    /* This module lives in marshal.c */
+    {"marshal", PyMarshal_Init},
+
+    /* This lives in import.c */
+    {"imp", initimp},
+
+    /* This lives in Python/Python-ast.c */
+    {"_ast", init_ast},
+
+    /* These entries are here for sys.builtin_module_names */
+    {"__main__", NULL},
+    {"__builtin__", NULL},
+    {"sys", NULL},
+    {"exceptions", NULL},
+    {"_io", init_io},
+
+    /* This lives in gcmodule.c */
+    {"gc", initgc},
+
+    /* This lives in _warnings.c */
+    {"_warnings", _PyWarnings_Init},
+
+    /* Sentinel */
+    {0, 0}
+};
+
+
+#ifdef __cplusplus
+}
+#endif
diff -Naur tmp/Python-2.7.13/Modules/config_sharedlibs.c Python-2.7.13/Modules/config_sharedlibs.c
--- tmp/Python-2.7.13/Modules/config_sharedlibs.c	1970-01-01 01:00:00.000000000 +0100
+++ Python-2.7.13/Modules/config_sharedlibs.c	2018-12-09 15:27:27.000000000 +0100
@@ -0,0 +1,97 @@
+/* Generated automatically from ./Modules/config.c.in by makesetup. */
+/* -*- C -*- ***********************************************
+Copyright (c) 2000, BeOpen.com.
+Copyright (c) 1995-2000, Corporation for National Research Initiatives.
+Copyright (c) 1990-1995, Stichting Mathematisch Centrum.
+All rights reserved.
+
+See the file "Misc/COPYRIGHT" for information on usage and
+redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.
+******************************************************************/
+
+/* Module configuration */
+
+/* !!! !!! !!! This file is edited by the makesetup script !!! !!! !!! */
+
+/* This file contains the table of built-in modules.
+   See init_builtin() in import.c. */
+
+#include "Python.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+
+extern void initthread(void);
+extern void initsignal(void);
+extern void initposix(void);
+extern void initerrno(void);
+extern void initpwd(void);
+extern void init_sre(void);
+extern void init_codecs(void);
+extern void init_weakref(void);
+extern void initzipimport(void);
+extern void init_symtable(void);
+extern void init_ssl(void);
+// extern void initopenssl(void);
+extern void SSL_library_init(void);
+extern void initxxsubtype(void);
+
+/* -- ADDMODULE MARKER 1 -- */
+
+extern void PyMarshal_Init(void);
+extern void initimp(void);
+extern void initgc(void);
+extern void init_ast(void);
+extern void _PyWarnings_Init(void);
+
+struct _inittab _PyImport_Inittab[] = {
+
+	{"thread", initthread},
+	{"signal", initsignal},
+	{"posix", initposix},
+	{"errno", initerrno},
+	{"pwd", initpwd},
+	{"_sre", init_sre},
+	{"_codecs", init_codecs},
+	{"_weakref", init_weakref},
+	{"zipimport", initzipimport},
+	{"_symtable", init_symtable},
+	{"_ssl", init_ssl},
+    // ??? iOS
+	// {"openssl", initopenssl},
+    {"openssl", SSL_library_init},
+	{"xxsubtype", initxxsubtype},
+
+/* -- ADDMODULE MARKER 2 -- */
+
+    /* This module lives in marshal.c */
+    {"marshal", PyMarshal_Init},
+
+    /* This lives in import.c */
+    {"imp", initimp},
+
+    /* This lives in Python/Python-ast.c */
+    {"_ast", init_ast},
+
+    /* These entries are here for sys.builtin_module_names */
+    {"__main__", NULL},
+    {"__builtin__", NULL},
+    {"sys", NULL},
+    {"exceptions", NULL},
+
+    /* This lives in gcmodule.c */
+    {"gc", initgc},
+
+    /* This lives in _warnings.c */
+    {"_warnings", _PyWarnings_Init},
+
+    /* Sentinel */
+    {0, 0}
+};
+
+
+#ifdef __cplusplus
+}
+#endif
diff -Naur tmp/Python-2.7.13/Modules/expat/xmlparse.c Python-2.7.13/Modules/expat/xmlparse.c
--- tmp/Python-2.7.13/Modules/expat/xmlparse.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/expat/xmlparse.c	2018-12-09 15:27:27.000000000 +0100
@@ -13,7 +13,7 @@
 #elif defined(__WATCOMC__)
 #include "watcomconfig.h"
 #elif defined(HAVE_EXPAT_CONFIG_H)
-#include <expat_config.h>
+#include "expat_config.h"
 #endif /* ndef COMPILED_FROM_DSP */
 
 #include <stddef.h>
diff -Naur tmp/Python-2.7.13/Modules/expat/xmlrole.c Python-2.7.13/Modules/expat/xmlrole.c
--- tmp/Python-2.7.13/Modules/expat/xmlrole.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/expat/xmlrole.c	2018-12-09 15:27:27.000000000 +0100
@@ -14,7 +14,7 @@
 #include "watcomconfig.h"
 #else
 #ifdef HAVE_EXPAT_CONFIG_H
-#include <expat_config.h>
+#include "expat_config.h"
 #endif
 #endif /* ndef COMPILED_FROM_DSP */
 
diff -Naur tmp/Python-2.7.13/Modules/expat/xmltok.c Python-2.7.13/Modules/expat/xmltok.c
--- tmp/Python-2.7.13/Modules/expat/xmltok.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/expat/xmltok.c	2018-12-09 15:27:27.000000000 +0100
@@ -14,7 +14,7 @@
 #include "watcomconfig.h"
 #else
 #ifdef HAVE_EXPAT_CONFIG_H
-#include <expat_config.h>
+#include "expat_config.h"
 #endif
 #endif /* ndef COMPILED_FROM_DSP */
 
diff -Naur tmp/Python-2.7.13/Modules/fpectlmodule.c Python-2.7.13/Modules/fpectlmodule.c
--- tmp/Python-2.7.13/Modules/fpectlmodule.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/fpectlmodule.c	2018-12-09 15:27:27.000000000 +0100
@@ -75,7 +75,8 @@
 #include <starlet.h>
 #include <ieeedef.h>
 #endif
-
+#include "ios_error.h"
+    
 #ifndef WANT_SIGFPE_HANDLER
 /* Define locally if they are not defined in Python.  This gives only
  * the limited control to induce a core dump in case of an exception.
@@ -251,7 +252,7 @@
 
 /*-- Give Up --------------------------------------------------------------*/
 #else
-    fputs("Operation not implemented\n", stderr);
+    fputs("Operation not implemented\n", thread_stderr);
 #endif
 
 }
@@ -270,7 +271,7 @@
                 IEEE$M_INHERIT;
         sys$ieee_set_fp_control(&clrmsk, 0, 0);
 #else
-    fputs("Operation not implemented\n", stderr);
+    fputs("Operation not implemented\n", thread_stderr);
 #endif
     Py_INCREF(Py_None);
     return Py_None;
diff -Naur tmp/Python-2.7.13/Modules/gcmodule.c Python-2.7.13/Modules/gcmodule.c
--- tmp/Python-2.7.13/Modules/gcmodule.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/gcmodule.c	2018-12-09 15:27:27.000000000 +0100
@@ -1437,7 +1437,7 @@
         n = 0; /* already collecting, don't do anything */
     else {
         collecting = 1;
-        n = collect(NUM_GENERATIONS - 1);
+        n = collect(NUM_GENERATIONS - 1); // That's the one throwing the exception?
         collecting = 0;
     }
 
diff -Naur tmp/Python-2.7.13/Modules/getpath.c Python-2.7.13/Modules/getpath.c
--- tmp/Python-2.7.13/Modules/getpath.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/getpath.c	2018-12-09 15:27:27.000000000 +0100
@@ -448,9 +448,14 @@
         ** which is in the framework, not relative to the executable, which may
         ** be outside of the framework. Except when we're in the build directory...
         */
-    pythonModule = NSModuleForSymbol(NSLookupAndBindSymbol("_Py_Initialize"));
+    /* On iOS, special case of the special case: all these functions are unavailable.
+       But we *know* we are in a framework */
+    // pythonModule = NSModuleForSymbol(NSLookupAndBindSymbol("_Py_Initialize"));
     /* Use dylib functions to find out where the framework was loaded from */
-    buf = (char *)NSLibraryNameForModule(pythonModule);
+    // buf = (char *)NSLibraryNameForModule(pythonModule);
+    // Modules will be in the "Documents" directory
+    buf = [[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask] firstObject].path.UTF8String;
+    // DocumentsDirectory = ;
     if (buf != NULL) {
         /* We're in a framework. */
         /* See if we might be in the build directory. The framework in the
diff -Naur tmp/Python-2.7.13/Modules/getpath.m Python-2.7.13/Modules/getpath.m
--- tmp/Python-2.7.13/Modules/getpath.m	1970-01-01 01:00:00.000000000 +0100
+++ Python-2.7.13/Modules/getpath.m	2018-12-09 15:27:27.000000000 +0100
@@ -0,0 +1,708 @@
+/* Return the initial module search path. */
+
+#include "Python.h"
+#include "osdefs.h"
+
+#include <sys/types.h>
+#include <string.h>
+
+#ifdef __APPLE__
+#include <mach-o/dyld.h>
+#import <Foundation/Foundation.h>
+#include "ios_error.h"
+#endif
+
+/* Search in some common locations for the associated Python libraries.
+ *
+ * Two directories must be found, the platform independent directory
+ * (prefix), containing the common .py and .pyc files, and the platform
+ * dependent directory (exec_prefix), containing the shared library
+ * modules.  Note that prefix and exec_prefix can be the same directory,
+ * but for some installations, they are different.
+ *
+ * Py_GetPath() carries out separate searches for prefix and exec_prefix.
+ * Each search tries a number of different locations until a ``landmark''
+ * file or directory is found.  If no prefix or exec_prefix is found, a
+ * warning message is issued and the preprocessor defined PREFIX and
+ * EXEC_PREFIX are used (even though they will not work); python carries on
+ * as best as is possible, but most imports will fail.
+ *
+ * Before any searches are done, the location of the executable is
+ * determined.  If argv[0] has one or more slashes in it, it is used
+ * unchanged.  Otherwise, it must have been invoked from the shell's path,
+ * so we search $PATH for the named executable and use that.  If the
+ * executable was not found on $PATH (or there was no $PATH environment
+ * variable), the original argv[0] string is used.
+ *
+ * Next, the executable location is examined to see if it is a symbolic
+ * link.  If so, the link is chased (correctly interpreting a relative
+ * pathname if one is found) and the directory of the link target is used.
+ *
+ * Finally, argv0_path is set to the directory containing the executable
+ * (i.e. the last component is stripped).
+ *
+ * With argv0_path in hand, we perform a number of steps.  The same steps
+ * are performed for prefix and for exec_prefix, but with a different
+ * landmark.
+ *
+ * Step 1. Are we running python out of the build directory?  This is
+ * checked by looking for a different kind of landmark relative to
+ * argv0_path.  For prefix, the landmark's path is derived from the VPATH
+ * preprocessor variable (taking into account that its value is almost, but
+ * not quite, what we need).  For exec_prefix, the landmark is
+ * Modules/Setup.  If the landmark is found, we're done.
+ *
+ * For the remaining steps, the prefix landmark will always be
+ * lib/python$VERSION/os.py and the exec_prefix will always be
+ * lib/python$VERSION/lib-dynload, where $VERSION is Python's version
+ * number as supplied by the Makefile.  Note that this means that no more
+ * build directory checking is performed; if the first step did not find
+ * the landmarks, the assumption is that python is running from an
+ * installed setup.
+ *
+ * Step 2. See if the $PYTHONHOME environment variable points to the
+ * installed location of the Python libraries.  If $PYTHONHOME is set, then
+ * it points to prefix and exec_prefix.  $PYTHONHOME can be a single
+ * directory, which is used for both, or the prefix and exec_prefix
+ * directories separated by a colon.
+ *
+ * Step 3. Try to find prefix and exec_prefix relative to argv0_path,
+ * backtracking up the path until it is exhausted.  This is the most common
+ * step to succeed.  Note that if prefix and exec_prefix are different,
+ * exec_prefix is more likely to be found; however if exec_prefix is a
+ * subdirectory of prefix, both will be found.
+ *
+ * Step 4. Search the directories pointed to by the preprocessor variables
+ * PREFIX and EXEC_PREFIX.  These are supplied by the Makefile but can be
+ * passed in as options to the configure script.
+ *
+ * That's it!
+ *
+ * Well, almost.  Once we have determined prefix and exec_prefix, the
+ * preprocessor variable PYTHONPATH is used to construct a path.  Each
+ * relative path on PYTHONPATH is prefixed with prefix.  Then the directory
+ * containing the shared library modules is appended.  The environment
+ * variable $PYTHONPATH is inserted in front of it all.  Finally, the
+ * prefix and exec_prefix globals are tweaked so they reflect the values
+ * expected by other code, by stripping the "lib/python$VERSION/..." stuff
+ * off.  If either points to the build directory, the globals are reset to
+ * the corresponding preprocessor variables (so sys.prefix will reflect the
+ * installation location, even though sys.path points into the build
+ * directory).  This seems to make more sense given that currently the only
+ * known use of sys.prefix and sys.exec_prefix is for the ILU installation
+ * process to find the installed Python tree.
+ */
+
+#ifdef __cplusplus
+ extern "C" {
+#endif
+
+
+#if !defined(PREFIX) || !defined(EXEC_PREFIX) || !defined(VERSION) || !defined(VPATH)
+#error "PREFIX, EXEC_PREFIX, VERSION, and VPATH must be constant defined"
+#endif
+
+#ifndef LANDMARK
+#define LANDMARK "os.py"
+#endif
+
+static char prefix[MAXPATHLEN+1];
+static char exec_prefix[MAXPATHLEN+1];
+static char progpath[MAXPATHLEN+1];
+static char *module_search_path = NULL;
+static char lib_python[] = "lib/python" VERSION;
+
+static void
+reduce(char *dir)
+{
+    size_t i = strlen(dir);
+    while (i > 0 && dir[i] != SEP)
+        --i;
+    dir[i] = '\0';
+}
+
+
+static int
+isfile(char *filename)          /* Is file, not directory */
+{
+    struct stat buf;
+    if (stat(filename, &buf) != 0)
+        return 0;
+    if (!S_ISREG(buf.st_mode))
+        return 0;
+    return 1;
+}
+
+
+static int
+ismodule(char *filename)        /* Is module -- check for .pyc/.pyo too */
+{
+    if (isfile(filename))
+        return 1;
+
+    /* Check for the compiled version of prefix. */
+    if (strlen(filename) < MAXPATHLEN) {
+        strcat(filename, Py_OptimizeFlag ? "o" : "c");
+        if (isfile(filename))
+            return 1;
+    }
+    return 0;
+}
+
+
+static int
+isxfile(char *filename)         /* Is executable file */
+{
+    struct stat buf;
+    if (stat(filename, &buf) != 0)
+        return 0;
+    if (!S_ISREG(buf.st_mode))
+        return 0;
+    if ((buf.st_mode & 0111) == 0)
+        return 0;
+    return 1;
+}
+
+
+static int
+isdir(char *filename)                   /* Is directory */
+{
+    struct stat buf;
+    if (stat(filename, &buf) != 0)
+        return 0;
+    if (!S_ISDIR(buf.st_mode))
+        return 0;
+    return 1;
+}
+
+
+/* Add a path component, by appending stuff to buffer.
+   buffer must have at least MAXPATHLEN + 1 bytes allocated, and contain a
+   NUL-terminated string with no more than MAXPATHLEN characters (not counting
+   the trailing NUL).  It's a fatal error if it contains a string longer than
+   that (callers must be careful!).  If these requirements are met, it's
+   guaranteed that buffer will still be a NUL-terminated string with no more
+   than MAXPATHLEN characters at exit.  If stuff is too long, only as much of
+   stuff as fits will be appended.
+*/
+static void
+joinpath(char *buffer, char *stuff)
+{
+    size_t n, k;
+    if (stuff[0] == SEP)
+        n = 0;
+    else {
+        n = strlen(buffer);
+        if (n > 0 && buffer[n-1] != SEP && n < MAXPATHLEN)
+            buffer[n++] = SEP;
+    }
+    if (n > MAXPATHLEN)
+        Py_FatalError("buffer overflow in getpath.c's joinpath()");
+    k = strlen(stuff);
+    if (n + k > MAXPATHLEN)
+        k = MAXPATHLEN - n;
+    strncpy(buffer+n, stuff, k);
+    buffer[n+k] = '\0';
+}
+
+/* copy_absolute requires that path be allocated at least
+   MAXPATHLEN + 1 bytes and that p be no more than MAXPATHLEN bytes. */
+static void
+copy_absolute(char *path, char *p)
+{
+    if (p[0] == SEP)
+        strcpy(path, p);
+    else {
+        if (!getcwd(path, MAXPATHLEN)) {
+            /* unable to get the current directory */
+            strcpy(path, p);
+            return;
+        }
+        if (p[0] == '.' && p[1] == SEP)
+            p += 2;
+        joinpath(path, p);
+    }
+}
+
+/* absolutize() requires that path be allocated at least MAXPATHLEN+1 bytes. */
+static void
+absolutize(char *path)
+{
+    char buffer[MAXPATHLEN + 1];
+
+    if (path[0] == SEP)
+        return;
+    copy_absolute(buffer, path);
+    strcpy(path, buffer);
+}
+
+/* search_for_prefix requires that argv0_path be no more than MAXPATHLEN
+   bytes long.
+*/
+static int
+search_for_prefix(char *argv0_path, char *home)
+{
+    size_t n;
+    char *vpath;
+
+    /* If PYTHONHOME is set, we believe it unconditionally */
+    if (home) {
+        char *delim;
+        strncpy(prefix, home, MAXPATHLEN);
+        delim = strchr(prefix, DELIM);
+        if (delim)
+            *delim = '\0';
+        joinpath(prefix, lib_python);
+        joinpath(prefix, LANDMARK);
+        return 1;
+    }
+
+    /* Check to see if argv[0] is in the build directory */
+    strcpy(prefix, argv0_path);
+    joinpath(prefix, "Modules/Setup");
+    if (isfile(prefix)) {
+        /* Check VPATH to see if argv0_path is in the build directory. */
+        vpath = VPATH;
+        strcpy(prefix, argv0_path);
+        joinpath(prefix, vpath);
+        joinpath(prefix, "Lib");
+        joinpath(prefix, LANDMARK);
+        if (ismodule(prefix))
+            return -1;
+    }
+
+    /* Search from argv0_path, until root is found */
+    copy_absolute(prefix, argv0_path);
+    do {
+        n = strlen(prefix);
+        joinpath(prefix, lib_python);
+        joinpath(prefix, LANDMARK);
+        if (ismodule(prefix))
+            return 1;
+        prefix[n] = '\0';
+        reduce(prefix);
+    } while (prefix[0]);
+
+    /* Look at configure's PREFIX */
+    strncpy(prefix, PREFIX, MAXPATHLEN);
+    joinpath(prefix, lib_python);
+    joinpath(prefix, LANDMARK);
+    if (ismodule(prefix))
+        return 1;
+
+    /* Fail */
+    return 0;
+}
+
+
+/* search_for_exec_prefix requires that argv0_path be no more than
+   MAXPATHLEN bytes long.
+*/
+static int
+search_for_exec_prefix(char *argv0_path, char *home)
+{
+    size_t n;
+
+    /* If PYTHONHOME is set, we believe it unconditionally */
+    if (home) {
+        char *delim;
+        delim = strchr(home, DELIM);
+        if (delim)
+            strncpy(exec_prefix, delim+1, MAXPATHLEN);
+        else
+            strncpy(exec_prefix, home, MAXPATHLEN);
+        joinpath(exec_prefix, lib_python);
+        joinpath(exec_prefix, "lib-dynload");
+        return 1;
+    }
+
+    /* Check to see if argv[0] is in the build directory. "pybuilddir.txt"
+       is written by setup.py and contains the relative path to the location
+       of shared library modules. */
+    strcpy(exec_prefix, argv0_path);
+    joinpath(exec_prefix, "pybuilddir.txt");
+    if (isfile(exec_prefix)) {
+      FILE *f = fopen(exec_prefix, "r");
+      if (f == NULL)
+	errno = 0;
+      else {
+	char rel_builddir_path[MAXPATHLEN+1];
+	size_t n;
+	n = fread(rel_builddir_path, 1, MAXPATHLEN, f);
+	rel_builddir_path[n] = '\0';
+	fclose(f);
+	strcpy(exec_prefix, argv0_path);
+	joinpath(exec_prefix, rel_builddir_path);
+	return -1;
+      }
+    }
+
+    /* Search from argv0_path, until root is found */
+    copy_absolute(exec_prefix, argv0_path);
+    do {
+        n = strlen(exec_prefix);
+        joinpath(exec_prefix, lib_python);
+        joinpath(exec_prefix, "lib-dynload");
+        if (isdir(exec_prefix))
+            return 1;
+        exec_prefix[n] = '\0';
+        reduce(exec_prefix);
+    } while (exec_prefix[0]);
+
+    /* Look at configure's EXEC_PREFIX */
+    strncpy(exec_prefix, EXEC_PREFIX, MAXPATHLEN);
+    joinpath(exec_prefix, lib_python);
+    joinpath(exec_prefix, "lib-dynload");
+    if (isdir(exec_prefix))
+        return 1;
+
+    /* Fail */
+    return 0;
+}
+
+
+static void
+calculate_path(void)
+{
+    extern char *Py_GetProgramName(void);
+
+    static char delimiter[2] = {DELIM, '\0'};
+    static char separator[2] = {SEP, '\0'};
+    char *pythonpath = PYTHONPATH;
+    char *rtpypath = Py_GETENV("PYTHONPATH");
+    char *home = Py_GetPythonHome();
+    char *path = getenv("PATH");
+    char *prog = Py_GetProgramName();
+    char argv0_path[MAXPATHLEN+1];
+    char zip_path[MAXPATHLEN+1];
+    int pfound, efound; /* 1 if found; -1 if found build directory */
+    char *buf;
+    size_t bufsz;
+    size_t prefixsz;
+    char *defpath = pythonpath;
+    
+#ifdef __IPHONE_OS_VERSION_MAX_ALLOWED
+    // A bit extreme, but the sandbox is really limiting 
+    char *iospath = Py_GETENV("PYTHONHOME");
+    sprintf(progpath, "%s/bin/%s", iospath, prog);
+#else
+    
+#ifdef WITH_NEXT_FRAMEWORK
+    NSModule pythonModule;
+#endif
+#ifdef __APPLE__
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_4
+    uint32_t nsexeclength = MAXPATHLEN;
+#else
+    unsigned long nsexeclength = MAXPATHLEN;
+#endif
+#endif
+
+        /* If there is no slash in the argv0 path, then we have to
+         * assume python is on the user's $PATH, since there's no
+         * other way to find a directory to start the search from.  If
+         * $PATH isn't exported, you lose.
+         */
+        if (strchr(prog, SEP))
+                strncpy(progpath, prog, MAXPATHLEN);
+#ifdef __APPLE__
+    
+     /* On Mac OS X, if a script uses an interpreter of the form
+      * "#!/opt/python2.3/bin/python", the kernel only passes "python"
+      * as argv[0], which falls through to the $PATH search below.
+      * If /opt/python2.3/bin isn't in your path, or is near the end,
+      * this algorithm may incorrectly find /usr/bin/python. To work
+      * around this, we can use _NSGetExecutablePath to get a better
+      * hint of what the intended interpreter was, although this
+      * will fail if a relative path was used. but in that case,
+      * absolutize() should help us out below
+      */
+    // Doesn't apply on an iPhone, though, since _NSGetExecutablePath gives the parent app
+     else if(0 == _NSGetExecutablePath(progpath, &nsexeclength) && progpath[0] == SEP)
+       ;
+#endif /* __APPLE__ */
+        else if (path) {
+                while (1) {
+                        char *delim = strchr(path, DELIM);
+
+                        if (delim) {
+                                size_t len = delim - path;
+                                if (len > MAXPATHLEN)
+                                        len = MAXPATHLEN;
+                                strncpy(progpath, path, len);
+                                *(progpath + len) = '\0';
+                        }
+                        else
+                                strncpy(progpath, path, MAXPATHLEN);
+
+                        joinpath(progpath, prog);
+                        if (isxfile(progpath))
+                                break;
+
+                        if (!delim) {
+                                progpath[0] = '\0';
+                                break;
+                        }
+                        path = delim + 1;
+                }
+        }
+        else
+                progpath[0] = '\0';
+#endif //__IPHONE_OS_VERSION_MAX_ALLOWED
+        if (progpath[0] != SEP && progpath[0] != '\0')
+                absolutize(progpath);
+        strncpy(argv0_path, progpath, MAXPATHLEN);
+        argv0_path[MAXPATHLEN] = '\0';
+
+#ifdef WITH_NEXT_FRAMEWORK
+        /* On Mac OS X we have a special case if we're running from a framework.
+        ** This is because the python home should be set relative to the library,
+        ** which is in the framework, not relative to the executable, which may
+        ** be outside of the framework. Except when we're in the build directory...
+        */
+    /* On iOS, special case of the special case: all these functions are unavailable.
+       But we *know* we are in a framework */
+    pythonModule = NSModuleForSymbol(NSLookupAndBindSymbol("_Py_Initialize"));
+    /* Use dylib functions to find out where the framework was loaded from */
+    buf = (char *)NSLibraryNameForModule(pythonModule).path.UTF8String;
+    // DocumentsDirectory = ;
+    if (buf != NULL) {
+        /* We're in a framework. */
+        /* See if we might be in the build directory. The framework in the
+        ** build directory is incomplete, it only has the .dylib and a few
+        ** needed symlinks, it doesn't have the Lib directories and such.
+        ** If we're running with the framework from the build directory we must
+        ** be running the interpreter in the build directory, so we use the
+        ** build-directory-specific logic to find Lib and such.
+        */
+        strncpy(argv0_path, buf, MAXPATHLEN);
+        reduce(argv0_path);
+        joinpath(argv0_path, lib_python);
+        joinpath(argv0_path, LANDMARK);
+        if (!ismodule(argv0_path)) {
+                /* We are in the build directory so use the name of the
+                   executable - we know that the absolute path is passed */
+                strncpy(argv0_path, progpath, MAXPATHLEN);
+        }
+        else {
+                /* Use the location of the library as the progpath */
+                strncpy(argv0_path, buf, MAXPATHLEN);
+        }
+    }
+#endif
+
+#if HAVE_READLINK
+    {
+        char tmpbuffer[MAXPATHLEN+1];
+        int linklen = readlink(progpath, tmpbuffer, MAXPATHLEN);
+        while (linklen != -1) {
+            /* It's not null terminated! */
+            tmpbuffer[linklen] = '\0';
+            if (tmpbuffer[0] == SEP)
+                /* tmpbuffer should never be longer than MAXPATHLEN,
+                   but extra check does not hurt */
+                strncpy(argv0_path, tmpbuffer, MAXPATHLEN);
+            else {
+                /* Interpret relative to progpath */
+                reduce(argv0_path);
+                joinpath(argv0_path, tmpbuffer);
+            }
+            linklen = readlink(argv0_path, tmpbuffer, MAXPATHLEN);
+        }
+    }
+#endif /* HAVE_READLINK */
+
+    reduce(argv0_path);
+    /* At this point, argv0_path is guaranteed to be less than
+       MAXPATHLEN bytes long.
+    */
+
+    if (!(pfound = search_for_prefix(argv0_path, home))) {
+        if (!Py_FrozenFlag)
+            fprintf(thread_stderr,
+                "Could not find platform independent libraries <prefix>\n");
+        strncpy(prefix, PREFIX, MAXPATHLEN);
+        joinpath(prefix, lib_python);
+    }
+    else
+        reduce(prefix);
+
+    strncpy(zip_path, prefix, MAXPATHLEN);
+    zip_path[MAXPATHLEN] = '\0';
+    if (pfound > 0) { /* Use the reduced prefix returned by Py_GetPrefix() */
+        reduce(zip_path);
+        reduce(zip_path);
+    }
+    else
+        strncpy(zip_path, PREFIX, MAXPATHLEN);
+    joinpath(zip_path, "lib/python00.zip");
+    bufsz = strlen(zip_path);   /* Replace "00" with version */
+    zip_path[bufsz - 6] = VERSION[0];
+    zip_path[bufsz - 5] = VERSION[2];
+
+    if (!(efound = search_for_exec_prefix(argv0_path, home))) {
+        if (!Py_FrozenFlag)
+            fprintf(thread_stderr,
+                "Could not find platform dependent libraries <exec_prefix>\n");
+        strncpy(exec_prefix, EXEC_PREFIX, MAXPATHLEN);
+        joinpath(exec_prefix, "lib/lib-dynload");
+    }
+    /* If we found EXEC_PREFIX do *not* reduce it!  (Yet.) */
+
+    if ((!pfound || !efound) && !Py_FrozenFlag)
+        fprintf(thread_stderr,
+                "Consider setting $PYTHONHOME to <prefix>[:<exec_prefix>]\n");
+
+    /* Calculate size of return buffer.
+     */
+    bufsz = 0;
+
+    if (rtpypath)
+        bufsz += strlen(rtpypath) + 1;
+
+    prefixsz = strlen(prefix) + 1;
+
+    while (1) {
+        char *delim = strchr(defpath, DELIM);
+
+        if (defpath[0] != SEP)
+            /* Paths are relative to prefix */
+            bufsz += prefixsz;
+
+        if (delim)
+            bufsz += delim - defpath + 1;
+        else {
+            bufsz += strlen(defpath) + 1;
+            break;
+        }
+        defpath = delim + 1;
+    }
+
+    bufsz += strlen(zip_path) + 1;
+    bufsz += strlen(exec_prefix) + 1;
+
+    /* This is the only malloc call in this file */
+    buf = (char *)PyMem_Malloc(bufsz);
+
+    if (buf == NULL) {
+        /* We can't exit, so print a warning and limp along */
+        fprintf(thread_stderr, "Not enough memory for dynamic PYTHONPATH.\n");
+        fprintf(thread_stderr, "Using default static PYTHONPATH.\n");
+        module_search_path = PYTHONPATH;
+    }
+    else {
+        /* Run-time value of $PYTHONPATH goes first */
+        if (rtpypath) {
+            strcpy(buf, rtpypath);
+            strcat(buf, delimiter);
+        }
+        else
+            buf[0] = '\0';
+
+        /* Next is the default zip path */
+        strcat(buf, zip_path);
+        strcat(buf, delimiter);
+
+        /* Next goes merge of compile-time $PYTHONPATH with
+         * dynamically located prefix.
+         */
+        defpath = pythonpath;
+        while (1) {
+            char *delim = strchr(defpath, DELIM);
+
+            if (defpath[0] != SEP) {
+                strcat(buf, prefix);
+                if (prefixsz >= 2 && prefix[prefixsz - 2] != SEP &&
+                    defpath[0] != (delim ? DELIM : L'\0')) {  /* not empty */
+                    strcat(buf, separator);
+                }
+            }
+
+            if (delim) {
+                size_t len = delim - defpath + 1;
+                size_t end = strlen(buf) + len;
+                strncat(buf, defpath, len);
+                *(buf + end) = '\0';
+            }
+            else {
+                strcat(buf, defpath);
+                break;
+            }
+            defpath = delim + 1;
+        }
+        strcat(buf, delimiter);
+
+        /* Finally, on goes the directory for dynamic-load modules */
+        strcat(buf, exec_prefix);
+
+        /* And publish the results */
+        module_search_path = buf;
+    }
+
+    /* Reduce prefix and exec_prefix to their essence,
+     * e.g. /usr/local/lib/python1.5 is reduced to /usr/local.
+     * If we're loading relative to the build directory,
+     * return the compiled-in defaults instead.
+     */
+    if (pfound > 0) {
+        reduce(prefix);
+        reduce(prefix);
+        /* The prefix is the root directory, but reduce() chopped
+         * off the "/". */
+        if (!prefix[0])
+                strcpy(prefix, separator);
+    }
+    else
+        strncpy(prefix, PREFIX, MAXPATHLEN);
+
+    if (efound > 0) {
+        reduce(exec_prefix);
+        reduce(exec_prefix);
+        reduce(exec_prefix);
+        if (!exec_prefix[0])
+                strcpy(exec_prefix, separator);
+    }
+    else
+        strncpy(exec_prefix, EXEC_PREFIX, MAXPATHLEN);
+}
+
+
+/* External interface */
+
+char *
+Py_GetPath(void)
+{
+    if (!module_search_path)
+        calculate_path();
+    return module_search_path;
+}
+
+char *
+Py_GetPrefix(void)
+{
+    if (!module_search_path)
+        calculate_path();
+    return prefix;
+}
+
+char *
+Py_GetExecPrefix(void)
+{
+    if (!module_search_path)
+        calculate_path();
+    return exec_prefix;
+}
+
+char *
+Py_GetProgramFullPath(void)
+{
+    if (!module_search_path)
+        calculate_path();
+    return progpath;
+}
+
+
+#ifdef __cplusplus
+}
+#endif
+
diff -Naur tmp/Python-2.7.13/Modules/ld_so_aix Python-2.7.13/Modules/ld_so_aix
--- tmp/Python-2.7.13/Modules/ld_so_aix	1970-01-01 01:00:00.000000000 +0100
+++ Python-2.7.13/Modules/ld_so_aix	2018-12-09 15:27:27.000000000 +0100
@@ -0,0 +1,195 @@
+#!/bin/sh
+#
+#   ========================================================================
+#   FILE:           ld_so_aix
+#   TYPE:           executable, uses makexp_aix
+#   SYSTEM:         AIX
+#
+#   DESCRIPTION:    Creates a shareable .o from a set of pre-compiled 
+#                   (unshared) .o files
+#
+#   USAGE:          ld_so_aix [CC] [arguments]
+#
+#   ARGUMENTS:      Same as for "ld". The following arguments are processed
+#                   or supplied by this script (those marked with an asterisk
+#                   can be overridden from command line):
+#
+#                       Argument                     Default value
+#                   (*) -o [OutputFileName]          -o shr.o
+#                   (*) -e [EntryPointLabel]         -e init[OutputBaseName]
+#                   (*) -bE:[ExportFile]             -bE:[OutputBaseName].exp
+#                   (*) -bI:[ImportFile]             -bI:./python.exp
+#                       -bM:[ModuleType]             -bM:SRE
+#                       -bhalt:[Number]              -bhalt:4
+#                       -T[Number]                   -T512
+#                       -H[Number]                   -H512
+#                       -lm
+#
+#                   The compiler specific ("-lc" or "-lc_r", "-lpthreads",...)
+#                   arguments will be automatically passed to "ld" according
+#                   to the CC command provided as a first argument to this
+#                   script. Usually, the same CC command was used to produce
+#                   the pre-compiled .o file(s).
+#
+#   NOTES:          1.  Since "ld_so_aix" was originally written for building
+#                       shared modules for the Python interpreter, the -e and
+#                       -bI default values match Python's conventions. In
+#                       Python, the entry point for a shared module is based
+#                       on the module's name (e.g., the "mathmodule" will
+#                       expect an  entry point of "initmath").
+#                   2.  The script accepts multiple .o or .a input files and
+#                       creates a single (shared) output file. The export list
+#                       that is created is based on the output file's basename
+#                       with the suffix ".exp".
+#                   3.  The resulting shared object file is left in the
+#                       current directory.
+#                   4.  Uncommenting the "echo" lines gives detailed output
+#                       about the commands executed in the script.
+#
+#                       
+#   HISTORY:        Oct-1996    -- Support added for multiple .o files --
+#                               -- and optional arguments processing.  --
+#                   Chris Myers (myers@tc.cornell.edu), Keith Kwok
+#                   (kkwok@tc.cornell.edu) and Vladimir Marangozov
+#
+#                   Aug-6-1996  -- Take care of the compiler specific  --
+#                               -- args by leaving CC to invoke "ld".  --
+#                   Vladimir Marangozov
+#
+#                   Jul-1-1996  -- Make sure to use /usr/ccs/bin/ld    --
+#                               -- Use makexp_aix for the export list. --
+#                   Vladimir Marangozov     (Vladimir.Marangozov@imag.fr)
+#
+#                   Manus Hand (mhand@csn.net) -- Initial code -- 6/24/96
+#   ========================================================================
+#
+
+usage="Usage: ld_so_aix [CC command] [ld arguments]"
+if test ! -n "$*"; then
+  echo $usage; exit 2
+fi
+
+makexp=`dirname $0`/makexp_aix
+test -x "${makexp}" || makexp="/Users/holzschu/src/Xcode_iPad/Python-2.7.13/Modules/makexp_aix"
+
+# Check for existence of compiler.
+CC=$1; shift
+whichcc=`which $CC`
+
+if test ! -x "$whichcc"; then
+  echo "ld_so_aix: Compiler '$CC' not found; exiting."
+  exit 2
+fi
+
+if test ! -n "$*"; then
+  echo $usage; exit 2
+fi
+
+# Default import file for Python
+# Can be overridden by providing a -bI: argument.
+impfile="./python.exp"
+
+# Parse arguments
+while test -n "$1"
+do
+  case "$1" in
+    -e | -Wl,-e)
+        if test -z "$2"; then
+	  echo "ld_so_aix: The -e flag needs a parameter; exiting."; exit 2
+	else
+	  shift; entry=$1
+	fi
+	;;
+    -e* | -Wl,-e*)
+	entry=`echo $1 | sed -e "s/-Wl,//" -e "s/-e//"`
+	;;
+    -o)
+	if test -z "$2"; then
+	  echo "ld_so_aix: The -o flag needs a parameter; exiting."; exit 2
+	else
+	  shift; objfile=$1
+	fi
+	;;
+    -o*)
+	objfile=`echo $1 | sed "s/-o//"`
+	;;
+    -bI:* | -Wl,-bI:*)
+	impfile=`echo $1 | sed -e "s/-Wl,//" -e "s/-bI://"`
+	;;
+    -bE:* | -Wl,-bE:*)
+	expfile=`echo $1 | sed -e "s/-Wl,//" -e "s/-bE://"`
+	;;
+    *.o | *.a)
+	objs="$objs $1"
+	args="$args $1"
+	;;
+    -bM:* | -Wl,-bM:* | -H* | -Wl,-H* | -T* | -Wl,-T* | -lm)
+	;;
+    *)
+        args="$args $1"
+	;;
+  esac
+  shift
+done
+
+if test "$objfile" = "libpython2.7.so"; then
+  ldsocoremode="true" 
+fi
+
+if test -z "$objs"; then
+  echo "ld_so_aix: No input files; exiting."
+  exit 2
+elif test ! -r "$impfile" -a -z "$ldsocoremode"; then
+  echo "ld_so_aix: Import file '$impfile' not found or not readable; exiting."
+  exit 2
+fi
+
+# If -o wasn't specified, assume "-o shr.o"
+if test -z "$objfile"; then
+  objfile=shr.o
+fi
+
+filename=`basename $objfile | sed "s/\.[^.]*$//"`
+
+# If -bE: wasn't specified, assume "-bE:$filename.exp"
+if test -z "$expfile"; then
+  expfile="$filename.exp"
+fi
+
+# Default entry symbol for Python modules = init[modulename]
+# Can be overridden by providing a -e argument.
+if test -z "$entry"; then
+  entry=init`echo $filename | sed "s/module.*//"`
+fi
+
+#echo "ld_so_aix: Debug info section"
+#echo "  -> output file : $objfile"
+#echo "  -> import file : $impfile"
+#echo "  -> export file : $expfile"
+#echo "  -> entry point : $entry"
+#echo "  -> object files: $objs"
+#echo "  -> CC arguments: $args"
+
+if test -z "$ldsocoremode"; then
+  CCOPT="-Wl,-e$entry -Wl,-bE:$expfile -Wl,-bI:$impfile -Wl,-bhalt:4"
+else
+  CCOPT="-Wl,-bnoentry -Wl,-bE:$expfile -Wl,-bhalt:4"
+fi
+CCOPT="$CCOPT -Wl,-bM:SRE -Wl,-T512 -Wl,-H512 -Wl,-brtl -Wl,-bnortllib -lm -o $objfile"
+
+CCARGS="$args"
+
+# Export list generation.
+#echo $makexp $expfile "$objfile" $objs
+$makexp $expfile "$objfile" $objs
+
+# Perform the link.
+#echo $CC $CCOPT $CCARGS
+$CC $CCOPT $CCARGS
+retval=$?
+
+# Delete the module's export list file.
+# Comment this line if you need it.
+rm -f $expfile
+
+exit $retval
diff -Naur tmp/Python-2.7.13/Modules/main.c Python-2.7.13/Modules/main.c
--- tmp/Python-2.7.13/Modules/main.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/main.c	2018-12-09 15:27:27.000000000 +0100
@@ -4,10 +4,13 @@
 #include "osdefs.h"
 #include "code.h" /* For CO_FUTURE_DIVISION */
 #include "import.h"
+#include "ios_error.h"
 
 #ifdef __VMS
 #include <unixlib.h>
 #endif
+// for TARGET_OS_IPHONE
+#include "TargetConditionals.h"
 
 #if defined(MS_WINDOWS) || defined(__CYGWIN__)
 #ifdef HAVE_FCNTL_H
@@ -49,7 +52,7 @@
    frontend; especially my_readline will behave different */
 #define PROGRAM_OPTS BASE_OPTS "w"
 /* corresponding flag */
-extern int Py_RISCOSWimpFlag;
+extern __thread int Py_RISCOSWimpFlag;
 #endif /*RISCOS*/
 
 /* Short usage message (with %s for argv0) */
@@ -116,7 +119,7 @@
 static int
 usage(int exitcode, char* program)
 {
-    FILE *f = exitcode ? stderr : stdout;
+    FILE *f = exitcode ? thread_stderr : thread_stdout;
 
     fprintf(f, usage_line, program);
     if (exitcode)
@@ -172,18 +175,18 @@
     PyObject *runpy, *runmodule, *runargs, *result;
     runpy = PyImport_ImportModule("runpy");
     if (runpy == NULL) {
-        fprintf(stderr, "Could not import runpy module\n");
+        fprintf(thread_stderr, "Could not import runpy module\n");
         return -1;
     }
     runmodule = PyObject_GetAttrString(runpy, "_run_module_as_main");
     if (runmodule == NULL) {
-        fprintf(stderr, "Could not access runpy._run_module_as_main\n");
+        fprintf(thread_stderr, "Could not access runpy._run_module_as_main\n");
         Py_DECREF(runpy);
         return -1;
     }
     runargs = Py_BuildValue("(si)", module, set_argv0);
     if (runargs == NULL) {
-        fprintf(stderr,
+        fprintf(thread_stderr,
             "Could not create arguments for runpy._run_module_as_main\n");
         Py_DECREF(runpy);
         Py_DECREF(runmodule);
@@ -243,7 +246,7 @@
     char *command = NULL;
     char *filename = NULL;
     char *module = NULL;
-    FILE *fp = stdin;
+    FILE *fp = thread_stdin;
     char *p;
     int unbuffered = 0;
     int skipfirstline = 0;
@@ -253,6 +256,27 @@
     int saw_unbuffered_flag = 0;
     PyCompilerFlags cf;
 
+#ifdef TARGET_OS_IPHONE
+    // initialize all flags:
+    Py_DebugFlag = 0; /* Needed by parser.c */
+    Py_VerboseFlag = 0; /* Needed by import.c */
+    Py_InteractiveFlag = 0; /* Needed by Py_FdIsInteractive() below */
+    Py_InspectFlag = 0; /* Needed to determine whether to exit at SystemExit */
+    Py_NoSiteFlag = 0; /* Suppress 'import site' */
+    Py_BytesWarningFlag = 0; /* Warn on str(bytes) and str(buffer) */
+    Py_DontWriteBytecodeFlag = 0; /* Suppress writing bytecode files (*.py[co]) */
+    Py_UseClassExceptionsFlag = 1; /* Needed by bltinmodule.c: deprecated */
+    Py_FrozenFlag = 0; /* Needed by getpath.c */
+    Py_UnicodeFlag = 0; /* Needed by compile.c */
+    Py_IgnoreEnvironmentFlag = 0; /* e.g. PYTHONPATH, PYTHONHOME */
+    /* _XXX Py_QnewFlag should go away in 2.3.  It's true iff -Qnew is passed,
+     on the command line, and is used in 2.2 by ceval.c to make all "/" divisions
+     true divisions (which they will be in 2.3). */
+    _Py_QnewFlag = 0;
+    Py_NoUserSiteDirectory = 0; /* for -s and site.py */
+    Py_HashRandomizationFlag = 0; /* for -R and PYTHONHASHSEED */
+#endif
+    
     cf.cf_flags = 0;
 
     orig_argc = argc;           /* For Py_GetArgcArgv() */
@@ -353,7 +377,7 @@
                 _Py_QnewFlag = 1;
                 break;
             }
-            fprintf(stderr,
+            fprintf(thread_stderr,
                 "-Q option should be `-Qold', "
                 "`-Qwarn', `-Qwarnall', or `-Qnew' only\n");
             return usage(2, argv[0]);
@@ -443,7 +467,7 @@
         return usage(0, argv[0]);
 
     if (version) {
-        fprintf(stderr, "Python %s\n", PY_VERSION);
+        fprintf(thread_stderr, "Python %s\n", PY_VERSION);
         return 0;
     }
 
@@ -490,39 +514,39 @@
 #endif
     }
 
-    stdin_is_interactive = Py_FdIsInteractive(stdin, (char *)0);
+    stdin_is_interactive = Py_FdIsInteractive(thread_stdin, (char *)0);
 
     if (unbuffered) {
 #if defined(MS_WINDOWS) || defined(__CYGWIN__)
-        _setmode(fileno(stdin), O_BINARY);
-        _setmode(fileno(stdout), O_BINARY);
+        _setmode(fileno(thread_stdin), O_BINARY);
+        _setmode(fileno(thread_stdout), O_BINARY);
 #endif
 #ifdef HAVE_SETVBUF
-        setvbuf(stdin,  (char *)NULL, _IONBF, BUFSIZ);
-        setvbuf(stdout, (char *)NULL, _IONBF, BUFSIZ);
-        setvbuf(stderr, (char *)NULL, _IONBF, BUFSIZ);
+        setvbuf(thread_stdin,  (char *)NULL, _IONBF, BUFSIZ);
+        setvbuf(thread_stdout, (char *)NULL, _IONBF, BUFSIZ);
+        setvbuf(thread_stderr, (char *)NULL, _IONBF, BUFSIZ);
 #else /* !HAVE_SETVBUF */
-        setbuf(stdin,  (char *)NULL);
-        setbuf(stdout, (char *)NULL);
-        setbuf(stderr, (char *)NULL);
+        setbuf(thread_stdin,  (char *)NULL);
+        setbuf(thread_stdout, (char *)NULL);
+        setbuf(thread_stderr, (char *)NULL);
 #endif /* !HAVE_SETVBUF */
     }
     else if (Py_InteractiveFlag) {
 #ifdef MS_WINDOWS
         /* Doesn't have to have line-buffered -- use unbuffered */
         /* Any set[v]buf(stdin, ...) screws up Tkinter :-( */
-        setvbuf(stdout, (char *)NULL, _IONBF, BUFSIZ);
+        setvbuf(thread_stdout, (char *)NULL, _IONBF, BUFSIZ);
 #else /* !MS_WINDOWS */
 #ifdef HAVE_SETVBUF
-        setvbuf(stdin,  (char *)NULL, _IOLBF, BUFSIZ);
-        setvbuf(stdout, (char *)NULL, _IOLBF, BUFSIZ);
+        setvbuf(thread_stdin,  (char *)NULL, _IOLBF, BUFSIZ);
+        setvbuf(thread_stdout, (char *)NULL, _IOLBF, BUFSIZ);
 #endif /* HAVE_SETVBUF */
 #endif /* !MS_WINDOWS */
         /* Leave stderr alone - it should be unbuffered anyway. */
     }
 #ifdef __VMS
     else {
-        setvbuf (stdout, (char *)NULL, _IOLBF, BUFSIZ);
+        setvbuf (thread_stdout, (char *)NULL, _IOLBF, BUFSIZ);
     }
 #endif /* __VMS */
 
@@ -544,13 +568,18 @@
     Py_SetProgramName(argv[0]);
 #endif
     Py_Initialize();
-
+    // We couldn't Initialize, need to return before we crash.
+    if (_PyThreadState_Current == NULL) {
+        fprintf(thread_stderr, "We could not initialize python, sorry\n"); fflush(thread_stderr);
+        exit(1);
+    }
+    
     if (Py_VerboseFlag ||
         (command == NULL && filename == NULL && module == NULL && stdin_is_interactive)) {
-        fprintf(stderr, "Python %s on %s\n",
+        fprintf(thread_stderr, "Python %s on %s\n",
             Py_GetVersion(), Py_GetPlatform());
         if (!Py_NoSiteFlag)
-            fprintf(stderr, "%s\n", COPYRIGHT);
+            fprintf(thread_stderr, "%s\n", COPYRIGHT);
     }
 
     if (command != NULL) {
@@ -571,7 +600,7 @@
     PySys_SetArgv(argc-_PyOS_optind, argv+_PyOS_optind);
 
     if ((Py_InspectFlag || (command == NULL && filename == NULL && module == NULL)) &&
-        isatty(fileno(stdin))) {
+        isatty(fileno(thread_stdin))) {
         PyObject *v;
         v = PyImport_ImportModule("readline");
         if (v == NULL)
@@ -581,6 +610,7 @@
     }
 
     if (command) {
+        fflush(thread_stderr); fflush(thread_stdout);
         sts = PyRun_SimpleStringFlags(command, &cf) != 0;
         free(command);
     } else if (module) {
@@ -603,7 +633,7 @@
 
         if (sts==-1 && filename!=NULL) {
             if ((fp = fopen(filename, "r")) == NULL) {
-                fprintf(stderr, "%s: can't open file '%s': [Errno %d] %s\n",
+                fprintf(thread_stderr, "%s: can't open file '%s': [Errno %d] %s\n",
                     argv[0], filename, errno, strerror(errno));
 
                 return 2;
@@ -624,7 +654,7 @@
                 struct stat sb;
                 if (fstat(fileno(fp), &sb) == 0 &&
                     S_ISDIR(sb.st_mode)) {
-                    fprintf(stderr, "%s: '%s' is a directory, cannot continue\n", argv[0], filename);
+                    fprintf(thread_stderr, "%s: '%s' is a directory, cannot continue\n", argv[0], filename);
                     fclose(fp);
                     return 1;
                 }
@@ -659,13 +689,13 @@
         (filename != NULL || command != NULL || module != NULL)) {
         Py_InspectFlag = 0;
         /* XXX */
-        sts = PyRun_AnyFileFlags(stdin, "<stdin>", &cf) != 0;
+        sts = PyRun_AnyFileFlags(thread_stdin, "<stdin>", &cf) != 0;
     }
 
     Py_Finalize();
 #ifdef RISCOS
     if (Py_RISCOSWimpFlag)
-        fprintf(stderr, "\x0cq\x0c"); /* make frontend quit */
+        fprintf(thread_stderr, "\x0cq\x0c"); /* make frontend quit */
 #endif
 
 #ifdef __INSURE__
diff -Naur tmp/Python-2.7.13/Modules/operator.c Python-2.7.13/Modules/operator.c
--- tmp/Python-2.7.13/Modules/operator.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/operator.c	2018-12-09 15:27:27.000000000 +0100
@@ -259,7 +259,7 @@
     volatile const unsigned char *left;
     volatile const unsigned char *right;
     Py_ssize_t i;
-    unsigned char result;
+    unsigned char result = 0;
 
     /* loop count depends on length of b */
     length = len_b;
diff -Naur tmp/Python-2.7.13/Modules/parsermodule.c Python-2.7.13/Modules/parsermodule.c
--- tmp/Python-2.7.13/Modules/parsermodule.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/parsermodule.c	2018-12-09 15:27:27.000000000 +0100
@@ -39,7 +39,7 @@
 #include "ast.h"
 #include "pyarena.h"
 
-extern grammar _PyParser_Grammar; /* From graminit.c */
+extern __thread grammar _PyParser_Grammar; /* From graminit.c */
 
 #ifdef lint
 #include <note.h>
diff -Naur tmp/Python-2.7.13/Modules/posixmodule.c Python-2.7.13/Modules/posixmodule.c
--- tmp/Python-2.7.13/Modules/posixmodule.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/posixmodule.c	2018-12-09 15:27:27.000000000 +0100
@@ -30,6 +30,8 @@
 #ifndef MS_WINDOWS
 #include "posixmodule.h"
 #endif
+#include "ios_error.h"
+#define TARGET_OS_IPHONE
 
 #if defined(__VMS)
 #    include <unixio.h>
@@ -3202,7 +3204,12 @@
     argvlist[argc] = NULL;
 
     execv(path, argvlist);
-
+#ifdef TARGET_OS_IPHONE
+	  PyMem_Free(path);
+      Py_INCREF(Py_None);
+      return Py_None;
+#endif
+    
     /* If we get here it's definitely an error */
 
     free_string_array(argvlist, argc);
@@ -3335,6 +3342,13 @@
     envlist[envc] = 0;
 
     execve(path, argvlist, envlist);
+#ifdef TARGET_OS_IPHONE
+        while (--envc >= 0)
+            PyMem_DEL(envlist[envc]);
+        PyMem_DEL(envlist);
+        Py_INCREF(Py_None);
+        return Py_None;
+#endif
 
     /* If we get here it's definitely an error */
 
@@ -3866,6 +3880,10 @@
 static PyObject *
 posix_fork(PyObject *self, PyObject *noargs)
 {
+#ifdef TARGET_OS_IPHONE
+    PyObject* newPid = PyLong_FromPid(0);
+    return newPid;
+#endif
     pid_t pid;
     int result = 0;
     _PyImport_AcquireLock();
@@ -6077,7 +6095,7 @@
 static PyObject *
 posix_setgroups(PyObject *self, PyObject *groups)
 {
-    int i, len;
+    Py_ssize_t i, len;
     gid_t grouplist[MAX_GROUPS];
 
     if (!PySequence_Check(groups)) {
@@ -6085,6 +6103,9 @@
         return NULL;
     }
     len = PySequence_Size(groups);
+    if (len < 0) {
+        return NULL;
+    }
     if (len > MAX_GROUPS) {
         PyErr_SetString(PyExc_ValueError, "too many groups");
         return NULL;
@@ -6681,6 +6702,7 @@
 PyDoc_STRVAR(posix_dup2__doc__,
 "dup2(old_fd, new_fd)\n\n\
 Duplicate file descriptor.");
+    FILE *child_stdin, *child_stdout, *child_stderr;
 
 static PyObject *
 posix_dup2(PyObject *self, PyObject *args)
diff -Naur tmp/Python-2.7.13/Modules/python.c Python-2.7.13/Modules/python.c
--- tmp/Python-2.7.13/Modules/python.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/python.c	2018-12-09 15:27:27.000000000 +0100
@@ -7,7 +7,7 @@
 #endif
 
 int
-main(int argc, char **argv)
+python_main(int argc, char **argv)
 {
 	/* 754 requires that FP exceptions run in "no stop" mode by default,
 	 * and until C vendors implement C99's ways to control FP exceptions,
diff -Naur tmp/Python-2.7.13/Modules/threadmodule.c Python-2.7.13/Modules/threadmodule.c
--- tmp/Python-2.7.13/Modules/threadmodule.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/threadmodule.c	2018-12-09 15:27:27.000000000 +0100
@@ -12,6 +12,7 @@
 #endif
 
 #include "pythread.h"
+#include "ios_error.h"
 
 static PyObject *ThreadError;
 static PyObject *str_dict;
@@ -632,7 +633,7 @@
             if (file)
                 PyFile_WriteObject(boot->func, file, 0);
             else
-                PyObject_Print(boot->func, stderr, 0);
+                PyObject_Print(boot->func, thread_stderr, 0);
             PySys_WriteStderr("\n");
             PyErr_Restore(exc, value, tb);
             PyErr_PrintEx(0);
diff -Naur tmp/Python-2.7.13/Modules/xxmodule.c Python-2.7.13/Modules/xxmodule.c
--- tmp/Python-2.7.13/Modules/xxmodule.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Modules/xxmodule.c	2018-12-09 15:27:27.000000000 +0100
@@ -15,6 +15,7 @@
 /* Xxo objects */
 
 #include "Python.h"
+#include "ios_error.h"
 
 static PyObject *ErrorObject;
 
@@ -188,8 +189,8 @@
     item = PyList_GetItem(list, 0);
     /* Py_INCREF(item); */
     PyList_SetItem(list, 1, PyInt_FromLong(0L));
-    PyObject_Print(item, stdout, 0);
-    printf("\n");
+    PyObject_Print(item, thread_stdout, 0);
+    fprintf(thread_stdout, "\n");
     /* Py_DECREF(item); */
 
     Py_INCREF(Py_None);
