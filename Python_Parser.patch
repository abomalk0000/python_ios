diff -Naur tmp/Python-2.7.13/Parser/acceler.c Python-2.7.13/Parser/acceler.c
--- tmp/Python-2.7.13/Parser/acceler.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Parser/acceler.c	2018-12-09 15:27:27.000000000 +0100
@@ -15,6 +15,7 @@
 #include "node.h"
 #include "token.h"
 #include "parser.h"
+#include "ios_error.h"
 
 /* Forward references */
 static void fixdfa(grammar *, dfa *);
@@ -70,7 +71,7 @@
     s->s_accept = 0;
     accel = (int *) PyObject_MALLOC(nl * sizeof(int));
     if (accel == NULL) {
-        fprintf(stderr, "no mem to build parser accelerators\n");
+        fprintf(thread_stderr, "no mem to build parser accelerators\n");
         exit(1);
     }
     for (k = 0; k < nl; k++)
@@ -81,20 +82,20 @@
         label *l = &g->g_ll.ll_label[lbl];
         int type = l->lb_type;
         if (a->a_arrow >= (1 << 7)) {
-            printf("XXX too many states!\n");
+            fprintf(thread_stdout, "XXX too many states!\n");
             continue;
         }
         if (ISNONTERMINAL(type)) {
             dfa *d1 = PyGrammar_FindDFA(g, type);
             int ibit;
             if (type - NT_OFFSET >= (1 << 7)) {
-                printf("XXX too high nonterminal number!\n");
+                fprintf(thread_stdout, "XXX too high nonterminal number!\n");
                 continue;
             }
             for (ibit = 0; ibit < g->g_ll.ll_nlabels; ibit++) {
                 if (testbit(d1->d_first, ibit)) {
                     if (accel[ibit] != -1)
-                        printf("XXX ambiguity!\n");
+                        fprintf(thread_stdout, "XXX ambiguity!\n");
                     accel[ibit] = a->a_arrow | (1 << 7) |
                         ((type - NT_OFFSET) << 8);
                 }
@@ -113,7 +114,7 @@
         int i;
         s->s_accel = (int *) PyObject_MALLOC((nl-k) * sizeof(int));
         if (s->s_accel == NULL) {
-            fprintf(stderr, "no mem to add parser accelerators\n");
+            fprintf(thread_stderr, "no mem to add parser accelerators\n");
             exit(1);
         }
         s->s_lower = k;
diff -Naur tmp/Python-2.7.13/Parser/firstsets.c Python-2.7.13/Parser/firstsets.c
--- tmp/Python-2.7.13/Parser/firstsets.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Parser/firstsets.c	2018-12-09 15:27:27.000000000 +0100
@@ -4,8 +4,9 @@
 #include "pgenheaders.h"
 #include "grammar.h"
 #include "token.h"
+#include "ios_error.h"
 
-extern int Py_DebugFlag;
+extern __thread int Py_DebugFlag;
 
 /* Forward */
 static void calcfirstset(grammar *, dfa *);
@@ -17,7 +18,7 @@
     dfa *d;
 
     if (Py_DebugFlag)
-        printf("Adding FIRST sets ...\n");
+        fprintf(thread_stdout, "Adding FIRST sets ...\n");
     for (i = 0; i < g->g_ndfas; i++) {
         d = &g->g_dfa[i];
         if (d->d_first == NULL)
@@ -41,16 +42,16 @@
     label *l0;
 
     if (Py_DebugFlag)
-        printf("Calculate FIRST set for '%s'\n", d->d_name);
+        fprintf(thread_stdout, "Calculate FIRST set for '%s'\n", d->d_name);
 
     if (dummy == NULL)
         dummy = newbitset(1);
     if (d->d_first == dummy) {
-        fprintf(stderr, "Left-recursion for '%s'\n", d->d_name);
+        fprintf(thread_stderr, "Left-recursion for '%s'\n", d->d_name);
         return;
     }
     if (d->d_first != NULL) {
-        fprintf(stderr, "Re-calculating FIRST set for '%s' ???\n",
+        fprintf(thread_stderr, "Re-calculating FIRST set for '%s' ???\n",
             d->d_name);
     }
     d->d_first = dummy;
@@ -83,7 +84,7 @@
             if (ISNONTERMINAL(type)) {
                 d1 = PyGrammar_FindDFA(g, type);
                 if (d1->d_first == dummy) {
-                    fprintf(stderr,
+                    fprintf(thread_stderr,
                         "Left-recursion below '%s'\n",
                         d->d_name);
                 }
@@ -101,12 +102,12 @@
     }
     d->d_first = result;
     if (Py_DebugFlag) {
-        printf("FIRST set for '%s': {", d->d_name);
+        fprintf(thread_stdout, "FIRST set for '%s': {", d->d_name);
         for (i = 0; i < nbits; i++) {
             if (testbit(result, i))
-                printf(" %s", PyGrammar_LabelRepr(&l0[i]));
+                fprintf(thread_stdout, " %s", PyGrammar_LabelRepr(&l0[i]));
         }
-        printf(" }\n");
+        fprintf(thread_stdout, " }\n");
     }
 
     PyObject_FREE(sym);
diff -Naur tmp/Python-2.7.13/Parser/grammar.c Python-2.7.13/Parser/grammar.c
--- tmp/Python-2.7.13/Parser/grammar.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Parser/grammar.c	2018-12-09 15:27:27.000000000 +0100
@@ -12,8 +12,9 @@
 #ifdef RISCOS
 #include <unixlib.h>
 #endif
+#include "ios_error.h"
 
-extern int Py_DebugFlag;
+extern __thread int Py_DebugFlag;
 
 grammar *
 newgrammar(int start)
@@ -107,7 +108,7 @@
     lb->lb_type = type;
     lb->lb_str = strdup(str);
     if (Py_DebugFlag)
-        printf("Label @ %8p, %d: %s\n", ll, ll->ll_nlabels,
+        fprintf(thread_stdout, "Label @ %8p, %d: %s\n", ll, ll->ll_nlabels,
                PyGrammar_LabelRepr(lb));
     return lb - ll->ll_label;
 }
@@ -124,7 +125,7 @@
             strcmp(ll->ll_label[i].lb_str, str) == 0*/)
             return i;
     }
-    fprintf(stderr, "Label %d/'%s' not found\n", type, str);
+    fprintf(thread_stderr, "Label %d/'%s' not found\n", type, str);
     Py_FatalError("grammar.c:findlabel()");
     return 0; /* Make gcc -Wall happy */
 }
@@ -138,7 +139,7 @@
     int i;
 
 #ifdef Py_DEBUG
-    printf("Translating labels ...\n");
+    fprintf(thread_stdout, "Translating labels ...\n");
 #endif
     /* Don't translate EMPTY */
     for (i = EMPTY+1; i < g->g_ll.ll_nlabels; i++)
@@ -151,13 +152,13 @@
     int i;
 
     if (Py_DebugFlag)
-        printf("Translating label %s ...\n", PyGrammar_LabelRepr(lb));
+        fprintf(thread_stdout, "Translating label %s ...\n", PyGrammar_LabelRepr(lb));
 
     if (lb->lb_type == NAME) {
         for (i = 0; i < g->g_ndfas; i++) {
             if (strcmp(lb->lb_str, g->g_dfa[i].d_name) == 0) {
                 if (Py_DebugFlag)
-                    printf(
+                    fprintf(thread_stdout, 
                         "Label %s is non-terminal %d.\n",
                         lb->lb_str,
                         g->g_dfa[i].d_type);
@@ -170,7 +171,7 @@
         for (i = 0; i < (int)N_TOKENS; i++) {
             if (strcmp(lb->lb_str, _PyParser_TokenNames[i]) == 0) {
                 if (Py_DebugFlag)
-                    printf("Label %s is terminal %d.\n",
+                    fprintf(thread_stdout, "Label %s is terminal %d.\n",
                         lb->lb_str, i);
                 lb->lb_type = i;
                 free(lb->lb_str);
@@ -178,7 +179,7 @@
                 return;
             }
         }
-        printf("Can't translate NAME label '%s'\n", lb->lb_str);
+        fprintf(thread_stdout, "Can't translate NAME label '%s'\n", lb->lb_str);
         return;
     }
 
@@ -190,7 +191,7 @@
             char *dest;
             size_t name_len;
             if (Py_DebugFlag)
-                printf("Label %s is a keyword\n", lb->lb_str);
+                fprintf(thread_stdout, "Label %s is a keyword\n", lb->lb_str);
             lb->lb_type = NAME;
             src = lb->lb_str + 1;
             p = strchr(src, '\'');
@@ -200,7 +201,7 @@
                 name_len = strlen(src);
             dest = (char *)malloc(name_len + 1);
             if (!dest) {
-                printf("Can't alloc dest '%s'\n", src);
+                fprintf(thread_stdout, "Can't alloc dest '%s'\n", src);
                 return;
             }
             strncpy(dest, src, name_len);
@@ -216,7 +217,7 @@
                 lb->lb_str = NULL;
             }
             else
-                printf("Unknown OP label %s\n",
+                fprintf(thread_stdout, "Unknown OP label %s\n",
                     lb->lb_str);
         }
         else if (lb->lb_str[2] && lb->lb_str[3] == lb->lb_str[0]) {
@@ -228,7 +229,7 @@
                 lb->lb_str = NULL;
             }
             else
-                printf("Unknown OP label %s\n",
+                fprintf(thread_stdout, "Unknown OP label %s\n",
                     lb->lb_str);
         }
         else if (lb->lb_str[2] && lb->lb_str[3] && lb->lb_str[4] == lb->lb_str[0]) {
@@ -241,14 +242,14 @@
                 lb->lb_str = NULL;
             }
             else
-                printf("Unknown OP label %s\n",
+                fprintf(thread_stdout, "Unknown OP label %s\n",
                     lb->lb_str);
         }
         else
-            printf("Can't translate STRING label %s\n",
+            fprintf(thread_stdout, "Can't translate STRING label %s\n",
                 lb->lb_str);
     }
     else
-        printf("Can't translate label '%s'\n",
+        fprintf(thread_stdout, "Can't translate label '%s'\n",
                PyGrammar_LabelRepr(lb));
 }
diff -Naur tmp/Python-2.7.13/Parser/listnode.c Python-2.7.13/Parser/listnode.c
--- tmp/Python-2.7.13/Parser/listnode.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Parser/listnode.c	2018-12-09 15:27:27.000000000 +0100
@@ -4,6 +4,7 @@
 #include "pgenheaders.h"
 #include "token.h"
 #include "node.h"
+#include "ios_error.h"
 
 /* Forward */
 static void list1node(FILE *, node *);
@@ -12,7 +13,7 @@
 void
 PyNode_ListTree(node *n)
 {
-    listnode(stdout, n);
+    listnode(thread_stdout, n);
 }
 
 static int level, atbol;
diff -Naur tmp/Python-2.7.13/Parser/myreadline.c Python-2.7.13/Parser/myreadline.c
--- tmp/Python-2.7.13/Parser/myreadline.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Parser/myreadline.c	2018-12-09 15:27:27.000000000 +0100
@@ -14,6 +14,7 @@
 #define WIN32_LEAN_AND_MEAN
 #include "windows.h"
 #endif /* MS_WINDOWS */
+#include "ios_error.h"
 
 #ifdef __VMS
 extern char* vms__StdioReadline(FILE *sys_stdin, FILE *sys_stdout, char *prompt);
@@ -30,7 +31,7 @@
 int (*PyOS_InputHook)(void) = NULL;
 
 #ifdef RISCOS
-int Py_RISCOSWimpFlag;
+__thread int Py_RISCOSWimpFlag;
 #endif
 
 /* This function restarts a fgets() after an EINTR error occurred
@@ -115,16 +116,16 @@
     fflush(sys_stdout);
 #ifndef RISCOS
     if (prompt)
-        fprintf(stderr, "%s", prompt);
+        fprintf(thread_stderr, "%s", prompt);
 #else
     if (prompt) {
         if(Py_RISCOSWimpFlag)
-            fprintf(stderr, "\x0cr%s\x0c", prompt);
+            fprintf(thread_stderr, "\x0cr%s\x0c", prompt);
         else
-            fprintf(stderr, "%s", prompt);
+            fprintf(thread_stderr, "%s", prompt);
     }
 #endif
-    fflush(stderr);
+    fflush(thread_stderr);
     switch (my_fgets(p, (int)n, sys_stdin)) {
     case 0: /* Normal case */
         break;
diff -Naur tmp/Python-2.7.13/Parser/parser.c Python-2.7.13/Parser/parser.c
--- tmp/Python-2.7.13/Parser/parser.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Parser/parser.c	2018-12-09 15:27:27.000000000 +0100
@@ -12,10 +12,10 @@
 #include "node.h"
 #include "parser.h"
 #include "errcode.h"
-
+#include "ios_error.h"
 
 #ifdef Py_DEBUG
-extern int Py_DebugFlag;
+extern __thread int Py_DebugFlag;
 #define D(x) if (!Py_DebugFlag); else x
 #else
 #define D(x)
@@ -39,7 +39,7 @@
 {
     register stackentry *top;
     if (s->s_top == s->s_base) {
-        fprintf(stderr, "s_push: parser stack overflow\n");
+        fprintf(thread_stderr, "s_push: parser stack overflow\n");
         return E_NOMEM;
     }
     top = --s->s_top;
@@ -154,7 +154,7 @@
                 break; /* no longer a keyword */
             }
 #endif
-            D(printf("It's a keyword\n"));
+            D(fprintf(thread_stdout, "It's a keyword\n"));
             return n - i;
         }
     }
@@ -164,13 +164,13 @@
         register int i;
         for (i = n; i > 0; i--, l++) {
             if (l->lb_type == type && l->lb_str == NULL) {
-                D(printf("It's a token we know\n"));
+                D(fprintf(thread_stdout, "It's a token we know\n"));
                 return n - i;
             }
         }
     }
 
-    D(printf("Illegal token\n"));
+    D(fprintf(thread_stdout, "Illegal token\n"));
     return -1;
 }
 
@@ -223,7 +223,7 @@
     register int ilabel;
     int err;
 
-    D(printf("Token %s/'%s' ... ", _PyParser_TokenNames[type], str));
+    D(fprintf(thread_stdout, "Token %s/'%s' ... ", _PyParser_TokenNames[type], str));
 
     /* Find out which label this token is */
     ilabel = classify(ps, type, str);
@@ -236,7 +236,7 @@
         register dfa *d = ps->p_stack.s_top->s_dfa;
         register state *s = &d->d_state[ps->p_stack.s_top->s_state];
 
-        D(printf(" DFA '%s', state %d:",
+        D(fprintf(thread_stdout, " DFA '%s', state %d:",
             d->d_name, ps->p_stack.s_top->s_state));
 
         /* Check accelerator */
@@ -251,25 +251,25 @@
                         ps->p_grammar, nt);
                     if ((err = push(&ps->p_stack, nt, d1,
                         arrow, lineno, col_offset)) > 0) {
-                        D(printf(" MemError: push\n"));
+                        D(fprintf(thread_stdout, " MemError: push\n"));
                         return err;
                     }
-                    D(printf(" Push ...\n"));
+                    D(fprintf(thread_stdout, " Push ...\n"));
                     continue;
                 }
 
                 /* Shift the token */
                 if ((err = shift(&ps->p_stack, type, str,
                                 x, lineno, col_offset)) > 0) {
-                    D(printf(" MemError: shift.\n"));
+                    D(fprintf(thread_stdout, " MemError: shift.\n"));
                     return err;
                 }
-                D(printf(" Shift.\n"));
+                D(fprintf(thread_stdout, " Shift.\n"));
                 /* Pop while we are in an accept-only state */
                 while (s = &d->d_state
                                 [ps->p_stack.s_top->s_state],
                     s->s_accept && s->s_narcs == 1) {
-                    D(printf("  DFA '%s', state %d: "
+                    D(fprintf(thread_stdout, "  DFA '%s', state %d: "
                              "Direct pop.\n",
                              d->d_name,
                              ps->p_stack.s_top->s_state));
@@ -281,7 +281,7 @@
 #endif
                     s_pop(&ps->p_stack);
                     if (s_empty(&ps->p_stack)) {
-                        D(printf("  ACCEPT.\n"));
+                        D(fprintf(thread_stdout, "  ACCEPT.\n"));
                         return E_DONE;
                     }
                     d = ps->p_stack.s_top->s_dfa;
@@ -298,16 +298,16 @@
 #endif
             /* Pop this dfa and try again */
             s_pop(&ps->p_stack);
-            D(printf(" Pop ...\n"));
+            D(fprintf(thread_stdout, " Pop ...\n"));
             if (s_empty(&ps->p_stack)) {
-                D(printf(" Error: bottom of stack.\n"));
+                D(fprintf(thread_stdout, " Error: bottom of stack.\n"));
                 return E_SYNTAX;
             }
             continue;
         }
 
         /* Stuck, report syntax error */
-        D(printf(" Error.\n"));
+        D(fprintf(thread_stdout, " Error.\n"));
         if (expected_ret) {
             if (s->s_lower == s->s_upper - 1) {
                 /* Only one possible expected token */
@@ -332,20 +332,20 @@
     int i;
 
     if (n == NULL)
-        printf("NIL");
+        fprintf(thread_stdout, "NIL");
     else {
         label l;
         l.lb_type = TYPE(n);
         l.lb_str = STR(n);
-        printf("%s", PyGrammar_LabelRepr(&l));
+        fprintf(thread_stdout, "%s", PyGrammar_LabelRepr(&l));
         if (ISNONTERMINAL(TYPE(n))) {
-            printf("(");
+            fprintf(thread_stdout, "(");
             for (i = 0; i < NCH(n); i++) {
                 if (i > 0)
-                    printf(",");
+                    fprintf(thread_stdout, ",");
                 dumptree(g, CHILD(n, i));
             }
-            printf(")");
+            fprintf(thread_stdout, ")");
         }
     }
 }
@@ -362,29 +362,29 @@
             showtree(g, CHILD(n, i));
     }
     else if (ISTERMINAL(TYPE(n))) {
-        printf("%s", _PyParser_TokenNames[TYPE(n)]);
+        fprintf(thread_stdout, "%s", _PyParser_TokenNames[TYPE(n)]);
         if (TYPE(n) == NUMBER || TYPE(n) == NAME)
-            printf("(%s)", STR(n));
-        printf(" ");
+            fprintf(thread_stdout, "(%s)", STR(n));
+        fprintf(thread_stdout, " ");
     }
     else
-        printf("? ");
+        fprintf(thread_stdout, "? ");
 }
 
 void
 printtree(parser_state *ps)
 {
     if (Py_DebugFlag) {
-        printf("Parse tree:\n");
+        fprintf(thread_stdout, "Parse tree:\n");
         dumptree(ps->p_grammar, ps->p_tree);
-        printf("\n");
-        printf("Tokens:\n");
+        fprintf(thread_stdout, "\n");
+        fprintf(thread_stdout, "Tokens:\n");
         showtree(ps->p_grammar, ps->p_tree);
-        printf("\n");
+        fprintf(thread_stdout, "\n");
     }
-    printf("Listing:\n");
+    fprintf(thread_stdout, "Listing:\n");
     PyNode_ListTree(ps->p_tree);
-    printf("\n");
+    fprintf(thread_stdout, "\n");
 }
 
 #endif /* Py_DEBUG */
diff -Naur tmp/Python-2.7.13/Parser/parsetok.c Python-2.7.13/Parser/parsetok.c
--- tmp/Python-2.7.13/Parser/parsetok.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Parser/parsetok.c	2018-12-09 15:27:27.000000000 +0100
@@ -9,8 +9,9 @@
 #include "parsetok.h"
 #include "errcode.h"
 #include "graminit.h"
+#include "ios_error.h"
 
-int Py_TabcheckFlag;
+__thread int Py_TabcheckFlag;
 
 
 /* Forward */
@@ -134,7 +135,7 @@
     int started = 0;
 
     if ((ps = PyParser_New(g, start)) == NULL) {
-        fprintf(stderr, "no mem for new parser\n");
+        fprintf(thread_stderr, "no mem for new parser\n");
         err_ret->error = E_NOMEM;
         PyTokenizer_Free(tok);
         return NULL;
@@ -179,7 +180,7 @@
         len = b - a; /* XXX this may compute NULL - NULL */
         str = (char *) PyObject_MALLOC(len + 1);
         if (str == NULL) {
-            fprintf(stderr, "no mem for next token\n");
+            fprintf(thread_stderr, "no mem for next token\n");
             err_ret->error = E_NOMEM;
             break;
         }
diff -Naur tmp/Python-2.7.13/Parser/pgen.c Python-2.7.13/Parser/pgen.c
--- tmp/Python-2.7.13/Parser/pgen.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Parser/pgen.c	2018-12-09 15:27:27.000000000 +0100
@@ -9,9 +9,10 @@
 #include "grammar.h"
 #include "metagrammar.h"
 #include "pgen.h"
+#include "ios_error.h"
 
-extern int Py_DebugFlag;
-extern int Py_IgnoreEnvironmentFlag; /* needed by Py_GETENV */
+extern __thread int Py_DebugFlag;
+extern __thread int Py_IgnoreEnvironmentFlag; /* needed by Py_GETENV */
 
 
 /* PART ONE -- CONSTRUCT NFA -- Cf. Algorithm 3.2 from [Aho&Ullman 77] */
@@ -138,7 +139,7 @@
 
 #define REQN(i, count) do { \
     if (i < count) { \
-        fprintf(stderr, REQNFMT, count); \
+        fprintf(thread_stderr, REQNFMT, count); \
         Py_FatalError("REQN"); \
     } \
 } while (0)
@@ -154,7 +155,7 @@
     int i;
 
     if (Py_DebugFlag)
-        printf("Compiling (meta-) parse tree into NFA grammar\n");
+        fprintf(thread_stdout, "Compiling (meta-) parse tree into NFA grammar\n");
     gr = newnfagrammar();
     REQ(n, MSTART);
     i = n->n_nchildren - 1; /* Last child is ENDMARKER */
@@ -311,7 +312,7 @@
     int i;
     nfaarc *ar;
 
-    printf("%c%2d%c",
+    fprintf(thread_stdout, "%c%2d%c",
         istate == nf->nf_start ? '*' : ' ',
         istate,
         istate == nf->nf_finish ? '.' : ' ');
@@ -319,12 +320,12 @@
     ar = st->st_arc;
     for (i = 0; i < st->st_narcs; i++) {
         if (i > 0)
-            printf("\n    ");
-        printf("-> %2d  %s", ar->ar_arrow,
+            fprintf(thread_stdout, "\n    ");
+        fprintf(thread_stdout, "-> %2d  %s", ar->ar_arrow,
             PyGrammar_LabelRepr(&ll->ll_label[ar->ar_label]));
         ar++;
     }
-    printf("\n");
+    fprintf(thread_stdout, "\n");
 }
 
 static void
@@ -332,7 +333,7 @@
 {
     int i;
 
-    printf("NFA '%s' has %d states; start %d, finish %d\n",
+    fprintf(thread_stdout, "NFA '%s' has %d states; start %d, finish %d\n",
         nf->nf_name, nf->nf_nstates, nf->nf_start, nf->nf_finish);
     for (i = 0; i < nf->nf_nstates; i++)
         dumpstate(ll, nf, i);
@@ -408,7 +409,7 @@
     yy->ss_deleted = 0;
     yy->ss_finish = testbit(ss, nf->nf_finish);
     if (yy->ss_finish)
-        printf("Error: nonterminal '%s' may produce empty.\n",
+        fprintf(thread_stdout, "Error: nonterminal '%s' may produce empty.\n",
             nf->nf_name);
 
     /* This algorithm is from a book written before
@@ -500,23 +501,23 @@
     ss_state *yy;
     ss_arc *zz;
 
-    printf("Subset DFA %s\n", msg);
+    fprintf(thread_stdout, "Subset DFA %s\n", msg);
     for (i = 0; i < xx_nstates; i++) {
         yy = &xx_state[i];
         if (yy->ss_deleted)
             continue;
-        printf(" Subset %d", i);
+        fprintf(thread_stdout, " Subset %d", i);
         if (yy->ss_finish)
-            printf(" (finish)");
-        printf(" { ");
+            fprintf(thread_stdout, " (finish)");
+        fprintf(thread_stdout, " { ");
         for (ibit = 0; ibit < nbits; ibit++) {
             if (testbit(yy->ss_ss, ibit))
-                printf("%d ", ibit);
+                fprintf(thread_stdout, "%d ", ibit);
         }
-        printf("}\n");
+        fprintf(thread_stdout, "}\n");
         for (iarc = 0; iarc < yy->ss_narcs; iarc++) {
             zz = &yy->ss_arc[iarc];
-            printf("  Arc to state %d, label %s\n",
+            fprintf(thread_stdout, "  Arc to state %d, label %s\n",
                 zz->sa_arrow,
                 PyGrammar_LabelRepr(
                     &ll->ll_label[zz->sa_label]));
@@ -555,7 +556,7 @@
     int i, j;
 
     if (Py_DebugFlag)
-        printf("Rename state %d to %d.\n", from, to);
+        fprintf(thread_stdout, "Rename state %d to %d.\n", from, to);
     for (i = 0; i < xx_nstates; i++) {
         if (xx_state[i].ss_deleted)
             continue;
@@ -648,9 +649,9 @@
     for (i = 0; i < gr->gr_nnfas; i++) {
         nf = gr->gr_nfa[i];
         if (Py_DebugFlag) {
-            printf("Dump of NFA for '%s' ...\n", nf->nf_name);
+            fprintf(thread_stdout, "Dump of NFA for '%s' ...\n", nf->nf_name);
             dumpnfa(&gr->gr_ll, nf);
-            printf("Making DFA for '%s' ...\n", nf->nf_name);
+            fprintf(thread_stdout, "Making DFA for '%s' ...\n", nf->nf_name);
         }
         d = adddfa(g, nf->nf_type, nf->nf_name);
         makedfa(gr, gr->gr_nfa[i], d);
diff -Naur tmp/Python-2.7.13/Parser/tokenizer.c Python-2.7.13/Parser/tokenizer.c
--- tmp/Python-2.7.13/Parser/tokenizer.c	2016-12-17 21:05:07.000000000 +0100
+++ Python-2.7.13/Parser/tokenizer.c	2018-12-09 15:27:27.000000000 +0100
@@ -17,6 +17,7 @@
 #include "codecs.h"
 #include "abstract.h"
 #include "pydebug.h"
+#include "ios_error.h"
 #endif /* PGEN */
 
 extern char *PyOS_Readline(FILE *, FILE *, char *);
@@ -795,7 +796,7 @@
     const char *encoding;
     char *converted;
 
-    if (PySys_GetFile((char *)"stdin", NULL) != stdin)
+    if (PySys_GetFile((char *)"stdin", NULL) != thread_stdin)
         return 0;
     sysstdin = PySys_GetObject("stdin");
     if (sysstdin == NULL || !PyFile_Check(sysstdin))
@@ -881,7 +882,7 @@
             return Py_CHARMASK(*tok->cur++);
         }
         if (tok->prompt != NULL) {
-            char *newtok = PyOS_Readline(stdin, stdout, tok->prompt);
+            char *newtok = PyOS_Readline(thread_stdin, thread_stdout, tok->prompt);
             if (tok->nextprompt != NULL)
                 tok->prompt = tok->nextprompt;
             if (newtok == NULL)
@@ -1753,9 +1754,9 @@
 void
 tok_dump(int type, char *start, char *end)
 {
-    printf("%s", _PyParser_TokenNames[type]);
+    fprintf(thread_stdout, "%s", _PyParser_TokenNames[type]);
     if (type == NAME || type == NUMBER || type == STRING || type == OP)
-        printf("(%.*s)", (int)(end - start), start);
+        fprintf(thread_stdout, "(%.*s)", (int)(end - start), start);
 }
 
 #endif
